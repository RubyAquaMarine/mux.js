/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace GNSNftRewardsV6 {
  export type TriggeredLimitIdStruct = {
    trader: PromiseOrValue<string>;
    pairIndex: PromiseOrValue<BigNumberish>;
    index: PromiseOrValue<BigNumberish>;
    order: PromiseOrValue<BigNumberish>;
  };

  export type TriggeredLimitIdStructOutput = [
    string,
    BigNumber,
    BigNumber,
    number
  ] & { trader: string; pairIndex: BigNumber; index: BigNumber; order: number };
}

export interface GNSNftRewardsV6Interface extends utils.Interface {
  functions: {
    "claimPoolTokens(uint256,uint256)": FunctionFragment;
    "claimTokens()": FunctionFragment;
    "currentOrder()": FunctionFragment;
    "currentRound()": FunctionFragment;
    "distributeNftReward((address,uint256,uint256,uint8),uint256)": FunctionFragment;
    "firstP()": FunctionFragment;
    "initialize(address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "openLimitOrderTypes(address,uint256,uint256)": FunctionFragment;
    "poolP()": FunctionFragment;
    "roundOrdersToClaim(address,uint256)": FunctionFragment;
    "roundTokens(uint256)": FunctionFragment;
    "sameBlockLimit()": FunctionFragment;
    "sameBlockP()": FunctionFragment;
    "sameBlockTriggers((address,uint256,uint256,uint8))": FunctionFragment;
    "setOpenLimitOrderType(address,uint256,uint256,uint8)": FunctionFragment;
    "storageT()": FunctionFragment;
    "storeFirstToTrigger((address,uint256,uint256,uint8),address)": FunctionFragment;
    "storeTriggerSameBlock((address,uint256,uint256,uint8),address)": FunctionFragment;
    "timedOut((address,uint256,uint256,uint8))": FunctionFragment;
    "tokensClaimed(address)": FunctionFragment;
    "tokensClaimedTotal()": FunctionFragment;
    "tokensToClaim(address)": FunctionFragment;
    "triggerTimeout()": FunctionFragment;
    "triggered((address,uint256,uint256,uint8))": FunctionFragment;
    "triggeredLimits(address,uint256,uint256,uint8)": FunctionFragment;
    "unregisterTrigger((address,uint256,uint256,uint8))": FunctionFragment;
    "updatePercentages(uint256,uint256,uint256)": FunctionFragment;
    "updateSameBlockLimit(uint256)": FunctionFragment;
    "updateTriggerTimeout(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimPoolTokens"
      | "claimTokens"
      | "currentOrder"
      | "currentRound"
      | "distributeNftReward"
      | "firstP"
      | "initialize"
      | "openLimitOrderTypes"
      | "poolP"
      | "roundOrdersToClaim"
      | "roundTokens"
      | "sameBlockLimit"
      | "sameBlockP"
      | "sameBlockTriggers"
      | "setOpenLimitOrderType"
      | "storageT"
      | "storeFirstToTrigger"
      | "storeTriggerSameBlock"
      | "timedOut"
      | "tokensClaimed"
      | "tokensClaimedTotal"
      | "tokensToClaim"
      | "triggerTimeout"
      | "triggered"
      | "triggeredLimits"
      | "unregisterTrigger"
      | "updatePercentages"
      | "updateSameBlockLimit"
      | "updateTriggerTimeout"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimPoolTokens",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentOrder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeNftReward",
    values: [
      GNSNftRewardsV6.TriggeredLimitIdStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "firstP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openLimitOrderTypes",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "poolP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "roundOrdersToClaim",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "roundTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sameBlockLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sameBlockP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sameBlockTriggers",
    values: [GNSNftRewardsV6.TriggeredLimitIdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setOpenLimitOrderType",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "storageT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "storeFirstToTrigger",
    values: [GNSNftRewardsV6.TriggeredLimitIdStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "storeTriggerSameBlock",
    values: [GNSNftRewardsV6.TriggeredLimitIdStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "timedOut",
    values: [GNSNftRewardsV6.TriggeredLimitIdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensClaimed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensClaimedTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensToClaim",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerTimeout",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "triggered",
    values: [GNSNftRewardsV6.TriggeredLimitIdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "triggeredLimits",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterTrigger",
    values: [GNSNftRewardsV6.TriggeredLimitIdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePercentages",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSameBlockLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTriggerTimeout",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimPoolTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeNftReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "firstP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openLimitOrderTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roundOrdersToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roundTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sameBlockLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sameBlockP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sameBlockTriggers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOpenLimitOrderType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "storageT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storeFirstToTrigger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeTriggerSameBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timedOut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensClaimedTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "triggered", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "triggeredLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterTrigger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSameBlockLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTriggerTimeout",
    data: BytesLike
  ): Result;

  events: {
    "NumberUpdated(string,uint256)": EventFragment;
    "PercentagesUpdated(uint256,uint256,uint256)": EventFragment;
    "PoolTokensClaimed(address,uint256,uint256,uint256)": EventFragment;
    "TokensClaimed(address,uint256)": EventFragment;
    "TriggerRewarded(tuple,address,uint256,uint256)": EventFragment;
    "TriggerUnregistered(tuple)": EventFragment;
    "TriggeredFirst(tuple,address)": EventFragment;
    "TriggeredSameBlock(tuple,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NumberUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PercentagesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolTokensClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TriggerRewarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TriggerUnregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TriggeredFirst"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TriggeredSameBlock"): EventFragment;
}

export interface NumberUpdatedEventObject {
  name: string;
  value: BigNumber;
}
export type NumberUpdatedEvent = TypedEvent<
  [string, BigNumber],
  NumberUpdatedEventObject
>;

export type NumberUpdatedEventFilter = TypedEventFilter<NumberUpdatedEvent>;

export interface PercentagesUpdatedEventObject {
  firstP: BigNumber;
  sameBlockP: BigNumber;
  poolP: BigNumber;
}
export type PercentagesUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  PercentagesUpdatedEventObject
>;

export type PercentagesUpdatedEventFilter =
  TypedEventFilter<PercentagesUpdatedEvent>;

export interface PoolTokensClaimedEventObject {
  bot: string;
  fromRound: BigNumber;
  toRound: BigNumber;
  tokens: BigNumber;
}
export type PoolTokensClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  PoolTokensClaimedEventObject
>;

export type PoolTokensClaimedEventFilter =
  TypedEventFilter<PoolTokensClaimedEvent>;

export interface TokensClaimedEventObject {
  bot: string;
  tokens: BigNumber;
}
export type TokensClaimedEvent = TypedEvent<
  [string, BigNumber],
  TokensClaimedEventObject
>;

export type TokensClaimedEventFilter = TypedEventFilter<TokensClaimedEvent>;

export interface TriggerRewardedEventObject {
  id: GNSNftRewardsV6.TriggeredLimitIdStructOutput;
  first: string;
  sameBlockCount: BigNumber;
  reward: BigNumber;
}
export type TriggerRewardedEvent = TypedEvent<
  [GNSNftRewardsV6.TriggeredLimitIdStructOutput, string, BigNumber, BigNumber],
  TriggerRewardedEventObject
>;

export type TriggerRewardedEventFilter = TypedEventFilter<TriggerRewardedEvent>;

export interface TriggerUnregisteredEventObject {
  id: GNSNftRewardsV6.TriggeredLimitIdStructOutput;
}
export type TriggerUnregisteredEvent = TypedEvent<
  [GNSNftRewardsV6.TriggeredLimitIdStructOutput],
  TriggerUnregisteredEventObject
>;

export type TriggerUnregisteredEventFilter =
  TypedEventFilter<TriggerUnregisteredEvent>;

export interface TriggeredFirstEventObject {
  id: GNSNftRewardsV6.TriggeredLimitIdStructOutput;
  bot: string;
}
export type TriggeredFirstEvent = TypedEvent<
  [GNSNftRewardsV6.TriggeredLimitIdStructOutput, string],
  TriggeredFirstEventObject
>;

export type TriggeredFirstEventFilter = TypedEventFilter<TriggeredFirstEvent>;

export interface TriggeredSameBlockEventObject {
  id: GNSNftRewardsV6.TriggeredLimitIdStructOutput;
  bot: string;
}
export type TriggeredSameBlockEvent = TypedEvent<
  [GNSNftRewardsV6.TriggeredLimitIdStructOutput, string],
  TriggeredSameBlockEventObject
>;

export type TriggeredSameBlockEventFilter =
  TypedEventFilter<TriggeredSameBlockEvent>;

export interface GNSNftRewardsV6 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GNSNftRewardsV6Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimPoolTokens(
      _fromRound: PromiseOrValue<BigNumberish>,
      _toRound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentOrder(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    distributeNftReward(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    firstP(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _storageT: PromiseOrValue<string>,
      _triggerTimeout: PromiseOrValue<BigNumberish>,
      _sameBlockLimit: PromiseOrValue<BigNumberish>,
      _firstP: PromiseOrValue<BigNumberish>,
      _sameBlockP: PromiseOrValue<BigNumberish>,
      _poolP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openLimitOrderTypes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    poolP(overrides?: CallOverrides): Promise<[BigNumber]>;

    roundOrdersToClaim(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    roundTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sameBlockLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    sameBlockP(overrides?: CallOverrides): Promise<[BigNumber]>;

    sameBlockTriggers(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    setOpenLimitOrderType(
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _type: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storageT(overrides?: CallOverrides): Promise<[string]>;

    storeFirstToTrigger(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      _bot: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storeTriggerSameBlock(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      _bot: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timedOut(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokensClaimed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokensClaimedTotal(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensToClaim(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    triggerTimeout(overrides?: CallOverrides): Promise<[BigNumber]>;

    triggered(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    triggeredLimits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { first: string; block: BigNumber }>;

    unregisterTrigger(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePercentages(
      _firstP: PromiseOrValue<BigNumberish>,
      _sameBlockP: PromiseOrValue<BigNumberish>,
      _poolP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSameBlockLimit(
      _sameBlockLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTriggerTimeout(
      _triggerTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  claimPoolTokens(
    _fromRound: PromiseOrValue<BigNumberish>,
    _toRound: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimTokens(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentOrder(overrides?: CallOverrides): Promise<BigNumber>;

  currentRound(overrides?: CallOverrides): Promise<BigNumber>;

  distributeNftReward(
    _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
    _reward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  firstP(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _storageT: PromiseOrValue<string>,
    _triggerTimeout: PromiseOrValue<BigNumberish>,
    _sameBlockLimit: PromiseOrValue<BigNumberish>,
    _firstP: PromiseOrValue<BigNumberish>,
    _sameBlockP: PromiseOrValue<BigNumberish>,
    _poolP: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openLimitOrderTypes(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  poolP(overrides?: CallOverrides): Promise<BigNumber>;

  roundOrdersToClaim(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  roundTokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sameBlockLimit(overrides?: CallOverrides): Promise<BigNumber>;

  sameBlockP(overrides?: CallOverrides): Promise<BigNumber>;

  sameBlockTriggers(
    _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
    overrides?: CallOverrides
  ): Promise<string[]>;

  setOpenLimitOrderType(
    _trader: PromiseOrValue<string>,
    _pairIndex: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    _type: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storageT(overrides?: CallOverrides): Promise<string>;

  storeFirstToTrigger(
    _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
    _bot: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storeTriggerSameBlock(
    _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
    _bot: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timedOut(
    _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokensClaimed(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokensClaimedTotal(overrides?: CallOverrides): Promise<BigNumber>;

  tokensToClaim(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  triggerTimeout(overrides?: CallOverrides): Promise<BigNumber>;

  triggered(
    _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  triggeredLimits(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { first: string; block: BigNumber }>;

  unregisterTrigger(
    _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePercentages(
    _firstP: PromiseOrValue<BigNumberish>,
    _sameBlockP: PromiseOrValue<BigNumberish>,
    _poolP: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSameBlockLimit(
    _sameBlockLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTriggerTimeout(
    _triggerTimeout: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimPoolTokens(
      _fromRound: PromiseOrValue<BigNumberish>,
      _toRound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimTokens(overrides?: CallOverrides): Promise<void>;

    currentOrder(overrides?: CallOverrides): Promise<BigNumber>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    distributeNftReward(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    firstP(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _storageT: PromiseOrValue<string>,
      _triggerTimeout: PromiseOrValue<BigNumberish>,
      _sameBlockLimit: PromiseOrValue<BigNumberish>,
      _firstP: PromiseOrValue<BigNumberish>,
      _sameBlockP: PromiseOrValue<BigNumberish>,
      _poolP: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    openLimitOrderTypes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    poolP(overrides?: CallOverrides): Promise<BigNumber>;

    roundOrdersToClaim(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roundTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sameBlockLimit(overrides?: CallOverrides): Promise<BigNumber>;

    sameBlockP(overrides?: CallOverrides): Promise<BigNumber>;

    sameBlockTriggers(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: CallOverrides
    ): Promise<string[]>;

    setOpenLimitOrderType(
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _type: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    storageT(overrides?: CallOverrides): Promise<string>;

    storeFirstToTrigger(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      _bot: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    storeTriggerSameBlock(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      _bot: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    timedOut(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokensClaimed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensClaimedTotal(overrides?: CallOverrides): Promise<BigNumber>;

    tokensToClaim(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    triggerTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    triggered(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    triggeredLimits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { first: string; block: BigNumber }>;

    unregisterTrigger(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePercentages(
      _firstP: PromiseOrValue<BigNumberish>,
      _sameBlockP: PromiseOrValue<BigNumberish>,
      _poolP: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSameBlockLimit(
      _sameBlockLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTriggerTimeout(
      _triggerTimeout: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NumberUpdated(string,uint256)"(
      name?: null,
      value?: null
    ): NumberUpdatedEventFilter;
    NumberUpdated(name?: null, value?: null): NumberUpdatedEventFilter;

    "PercentagesUpdated(uint256,uint256,uint256)"(
      firstP?: null,
      sameBlockP?: null,
      poolP?: null
    ): PercentagesUpdatedEventFilter;
    PercentagesUpdated(
      firstP?: null,
      sameBlockP?: null,
      poolP?: null
    ): PercentagesUpdatedEventFilter;

    "PoolTokensClaimed(address,uint256,uint256,uint256)"(
      bot?: null,
      fromRound?: null,
      toRound?: null,
      tokens?: null
    ): PoolTokensClaimedEventFilter;
    PoolTokensClaimed(
      bot?: null,
      fromRound?: null,
      toRound?: null,
      tokens?: null
    ): PoolTokensClaimedEventFilter;

    "TokensClaimed(address,uint256)"(
      bot?: null,
      tokens?: null
    ): TokensClaimedEventFilter;
    TokensClaimed(bot?: null, tokens?: null): TokensClaimedEventFilter;

    "TriggerRewarded(tuple,address,uint256,uint256)"(
      id?: null,
      first?: null,
      sameBlockCount?: null,
      reward?: null
    ): TriggerRewardedEventFilter;
    TriggerRewarded(
      id?: null,
      first?: null,
      sameBlockCount?: null,
      reward?: null
    ): TriggerRewardedEventFilter;

    "TriggerUnregistered(tuple)"(id?: null): TriggerUnregisteredEventFilter;
    TriggerUnregistered(id?: null): TriggerUnregisteredEventFilter;

    "TriggeredFirst(tuple,address)"(
      id?: null,
      bot?: null
    ): TriggeredFirstEventFilter;
    TriggeredFirst(id?: null, bot?: null): TriggeredFirstEventFilter;

    "TriggeredSameBlock(tuple,address)"(
      id?: null,
      bot?: null
    ): TriggeredSameBlockEventFilter;
    TriggeredSameBlock(id?: null, bot?: null): TriggeredSameBlockEventFilter;
  };

  estimateGas: {
    claimPoolTokens(
      _fromRound: PromiseOrValue<BigNumberish>,
      _toRound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentOrder(overrides?: CallOverrides): Promise<BigNumber>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    distributeNftReward(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    firstP(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _storageT: PromiseOrValue<string>,
      _triggerTimeout: PromiseOrValue<BigNumberish>,
      _sameBlockLimit: PromiseOrValue<BigNumberish>,
      _firstP: PromiseOrValue<BigNumberish>,
      _sameBlockP: PromiseOrValue<BigNumberish>,
      _poolP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openLimitOrderTypes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolP(overrides?: CallOverrides): Promise<BigNumber>;

    roundOrdersToClaim(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roundTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sameBlockLimit(overrides?: CallOverrides): Promise<BigNumber>;

    sameBlockP(overrides?: CallOverrides): Promise<BigNumber>;

    sameBlockTriggers(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOpenLimitOrderType(
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _type: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storageT(overrides?: CallOverrides): Promise<BigNumber>;

    storeFirstToTrigger(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      _bot: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storeTriggerSameBlock(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      _bot: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timedOut(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensClaimed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensClaimedTotal(overrides?: CallOverrides): Promise<BigNumber>;

    tokensToClaim(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    triggerTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    triggered(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    triggeredLimits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unregisterTrigger(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePercentages(
      _firstP: PromiseOrValue<BigNumberish>,
      _sameBlockP: PromiseOrValue<BigNumberish>,
      _poolP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSameBlockLimit(
      _sameBlockLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTriggerTimeout(
      _triggerTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimPoolTokens(
      _fromRound: PromiseOrValue<BigNumberish>,
      _toRound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentOrder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributeNftReward(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    firstP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _storageT: PromiseOrValue<string>,
      _triggerTimeout: PromiseOrValue<BigNumberish>,
      _sameBlockLimit: PromiseOrValue<BigNumberish>,
      _firstP: PromiseOrValue<BigNumberish>,
      _sameBlockP: PromiseOrValue<BigNumberish>,
      _poolP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openLimitOrderTypes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roundOrdersToClaim(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roundTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sameBlockLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sameBlockP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sameBlockTriggers(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOpenLimitOrderType(
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _type: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storageT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    storeFirstToTrigger(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      _bot: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storeTriggerSameBlock(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      _bot: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timedOut(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensClaimed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensClaimedTotal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensToClaim(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    triggerTimeout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    triggered(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    triggeredLimits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unregisterTrigger(
      _id: GNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePercentages(
      _firstP: PromiseOrValue<BigNumberish>,
      _sameBlockP: PromiseOrValue<BigNumberish>,
      _poolP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSameBlockLimit(
      _sameBlockLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTriggerTimeout(
      _triggerTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
