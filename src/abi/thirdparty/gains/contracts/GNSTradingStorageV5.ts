/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace GNSTradingStorageV5 {
  export type OpenLimitOrderStruct = {
    trader: PromiseOrValue<string>;
    pairIndex: PromiseOrValue<BigNumberish>;
    index: PromiseOrValue<BigNumberish>;
    positionSize: PromiseOrValue<BigNumberish>;
    spreadReductionP: PromiseOrValue<BigNumberish>;
    buy: PromiseOrValue<boolean>;
    leverage: PromiseOrValue<BigNumberish>;
    tp: PromiseOrValue<BigNumberish>;
    sl: PromiseOrValue<BigNumberish>;
    minPrice: PromiseOrValue<BigNumberish>;
    maxPrice: PromiseOrValue<BigNumberish>;
    block: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BigNumberish>;
  };

  export type OpenLimitOrderStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    trader: string;
    pairIndex: BigNumber;
    index: BigNumber;
    positionSize: BigNumber;
    spreadReductionP: BigNumber;
    buy: boolean;
    leverage: BigNumber;
    tp: BigNumber;
    sl: BigNumber;
    minPrice: BigNumber;
    maxPrice: BigNumber;
    block: BigNumber;
    tokenId: BigNumber;
  };

  export type TradeStruct = {
    trader: PromiseOrValue<string>;
    pairIndex: PromiseOrValue<BigNumberish>;
    index: PromiseOrValue<BigNumberish>;
    initialPosToken: PromiseOrValue<BigNumberish>;
    positionSizeDai: PromiseOrValue<BigNumberish>;
    openPrice: PromiseOrValue<BigNumberish>;
    buy: PromiseOrValue<boolean>;
    leverage: PromiseOrValue<BigNumberish>;
    tp: PromiseOrValue<BigNumberish>;
    sl: PromiseOrValue<BigNumberish>;
  };

  export type TradeStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    trader: string;
    pairIndex: BigNumber;
    index: BigNumber;
    initialPosToken: BigNumber;
    positionSizeDai: BigNumber;
    openPrice: BigNumber;
    buy: boolean;
    leverage: BigNumber;
    tp: BigNumber;
    sl: BigNumber;
  };

  export type PendingMarketOrderStruct = {
    trade: GNSTradingStorageV5.TradeStruct;
    block: PromiseOrValue<BigNumberish>;
    wantedPrice: PromiseOrValue<BigNumberish>;
    slippageP: PromiseOrValue<BigNumberish>;
    spreadReductionP: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BigNumberish>;
  };

  export type PendingMarketOrderStructOutput = [
    GNSTradingStorageV5.TradeStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    trade: GNSTradingStorageV5.TradeStructOutput;
    block: BigNumber;
    wantedPrice: BigNumber;
    slippageP: BigNumber;
    spreadReductionP: BigNumber;
    tokenId: BigNumber;
  };

  export type PendingNftOrderStruct = {
    nftHolder: PromiseOrValue<string>;
    nftId: PromiseOrValue<BigNumberish>;
    trader: PromiseOrValue<string>;
    pairIndex: PromiseOrValue<BigNumberish>;
    index: PromiseOrValue<BigNumberish>;
    orderType: PromiseOrValue<BigNumberish>;
  };

  export type PendingNftOrderStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    number
  ] & {
    nftHolder: string;
    nftId: BigNumber;
    trader: string;
    pairIndex: BigNumber;
    index: BigNumber;
    orderType: number;
  };

  export type TradeInfoStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    tokenPriceDai: PromiseOrValue<BigNumberish>;
    openInterestDai: PromiseOrValue<BigNumberish>;
    tpLastUpdated: PromiseOrValue<BigNumberish>;
    slLastUpdated: PromiseOrValue<BigNumberish>;
    beingMarketClosed: PromiseOrValue<boolean>;
  };

  export type TradeInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    tokenId: BigNumber;
    tokenPriceDai: BigNumber;
    openInterestDai: BigNumber;
    tpLastUpdated: BigNumber;
    slLastUpdated: BigNumber;
    beingMarketClosed: boolean;
  };
}

export interface GNSTradingStorageV5Interface extends utils.Interface {
  functions: {
    "MINTER_ROLE()": FunctionFragment;
    "PRECISION()": FunctionFragment;
    "addSupportedToken(address)": FunctionFragment;
    "addTradingContract(address)": FunctionFragment;
    "callbacks()": FunctionFragment;
    "claimFees()": FunctionFragment;
    "dai()": FunctionFragment;
    "dev()": FunctionFragment;
    "devFeesDai()": FunctionFragment;
    "devFeesToken()": FunctionFragment;
    "distributeLpRewards(uint256)": FunctionFragment;
    "firstEmptyOpenLimitIndex(address,uint256)": FunctionFragment;
    "firstEmptyTradeIndex(address,uint256)": FunctionFragment;
    "getOpenLimitOrder(address,uint256,uint256)": FunctionFragment;
    "getOpenLimitOrders()": FunctionFragment;
    "getPendingOrderIds(address)": FunctionFragment;
    "getSpreadReductionsArray()": FunctionFragment;
    "getSupportedTokens()": FunctionFragment;
    "gov()": FunctionFragment;
    "govFeesDai()": FunctionFragment;
    "govFeesToken()": FunctionFragment;
    "handleDevGovFees(uint256,uint256,bool,bool)": FunctionFragment;
    "handleTokens(address,uint256,bool)": FunctionFragment;
    "hasOpenLimitOrder(address,uint256,uint256)": FunctionFragment;
    "increaseNftRewards(uint256,uint256)": FunctionFragment;
    "initialize(address,address,address,address[5],address,address,uint256)": FunctionFragment;
    "isTradingContract(address)": FunctionFragment;
    "linkErc677()": FunctionFragment;
    "maxPendingMarketOrders()": FunctionFragment;
    "maxTradesPerPair()": FunctionFragment;
    "nftLastSuccess(uint256)": FunctionFragment;
    "nftRewards()": FunctionFragment;
    "nftSuccessTimelock()": FunctionFragment;
    "nfts(uint256)": FunctionFragment;
    "openInterestDai(uint256,uint256)": FunctionFragment;
    "openLimitOrderIds(address,uint256,uint256)": FunctionFragment;
    "openLimitOrders(uint256)": FunctionFragment;
    "openLimitOrdersCount(address,uint256)": FunctionFragment;
    "openTrades(address,uint256,uint256)": FunctionFragment;
    "openTradesCount(address,uint256)": FunctionFragment;
    "openTradesInfo(address,uint256,uint256)": FunctionFragment;
    "pairTraders(uint256,uint256)": FunctionFragment;
    "pairTradersArray(uint256)": FunctionFragment;
    "pairTradersId(address,uint256)": FunctionFragment;
    "pendingMarketCloseCount(address,uint256)": FunctionFragment;
    "pendingMarketOpenCount(address,uint256)": FunctionFragment;
    "pendingOrderIds(address,uint256)": FunctionFragment;
    "pendingOrderIdsCount(address)": FunctionFragment;
    "pool()": FunctionFragment;
    "priceAggregator()": FunctionFragment;
    "removeTradingContract(address)": FunctionFragment;
    "reqID_pendingMarketOrder(uint256)": FunctionFragment;
    "reqID_pendingNftOrder(uint256)": FunctionFragment;
    "setCallbacks(address)": FunctionFragment;
    "setDev(address)": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setMaxOpenInterestDai(uint256,uint256)": FunctionFragment;
    "setMaxPendingMarketOrders(uint256)": FunctionFragment;
    "setMaxTradesPerPair(uint256)": FunctionFragment;
    "setNftSuccessTimelock(uint256)": FunctionFragment;
    "setPool(address)": FunctionFragment;
    "setPriceAggregator(address)": FunctionFragment;
    "setSpreadReductionsP(uint256[5])": FunctionFragment;
    "setTrading(address)": FunctionFragment;
    "setVault(address)": FunctionFragment;
    "spreadReductionsP(uint256)": FunctionFragment;
    "storeOpenLimitOrder((address,uint256,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "storePendingMarketOrder(((address,uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256),uint256,bool)": FunctionFragment;
    "storePendingNftOrder((address,uint256,address,uint256,uint256,uint8),uint256)": FunctionFragment;
    "storeTrade((address,uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,bool))": FunctionFragment;
    "supportedTokens(uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "tokensBurned()": FunctionFragment;
    "tokensMinted()": FunctionFragment;
    "trading()": FunctionFragment;
    "transferDai(address,address,uint256)": FunctionFragment;
    "transferLinkToAggregator(address,uint256,uint256)": FunctionFragment;
    "unregisterOpenLimitOrder(address,uint256,uint256)": FunctionFragment;
    "unregisterPendingMarketOrder(uint256,bool)": FunctionFragment;
    "unregisterPendingNftOrder(uint256)": FunctionFragment;
    "unregisterTrade(address,uint256,uint256)": FunctionFragment;
    "updateNfts(address[5])": FunctionFragment;
    "updateOpenLimitOrder((address,uint256,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "updateSl(address,uint256,uint256,uint256)": FunctionFragment;
    "updateToken(address)": FunctionFragment;
    "updateTp(address,uint256,uint256,uint256)": FunctionFragment;
    "updateTrade((address,uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256,uint256))": FunctionFragment;
    "vault()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MINTER_ROLE"
      | "PRECISION"
      | "addSupportedToken"
      | "addTradingContract"
      | "callbacks"
      | "claimFees"
      | "dai"
      | "dev"
      | "devFeesDai"
      | "devFeesToken"
      | "distributeLpRewards"
      | "firstEmptyOpenLimitIndex"
      | "firstEmptyTradeIndex"
      | "getOpenLimitOrder"
      | "getOpenLimitOrders"
      | "getPendingOrderIds"
      | "getSpreadReductionsArray"
      | "getSupportedTokens"
      | "gov"
      | "govFeesDai"
      | "govFeesToken"
      | "handleDevGovFees"
      | "handleTokens"
      | "hasOpenLimitOrder"
      | "increaseNftRewards"
      | "initialize"
      | "isTradingContract"
      | "linkErc677"
      | "maxPendingMarketOrders"
      | "maxTradesPerPair"
      | "nftLastSuccess"
      | "nftRewards"
      | "nftSuccessTimelock"
      | "nfts"
      | "openInterestDai"
      | "openLimitOrderIds"
      | "openLimitOrders"
      | "openLimitOrdersCount"
      | "openTrades"
      | "openTradesCount"
      | "openTradesInfo"
      | "pairTraders"
      | "pairTradersArray"
      | "pairTradersId"
      | "pendingMarketCloseCount"
      | "pendingMarketOpenCount"
      | "pendingOrderIds"
      | "pendingOrderIdsCount"
      | "pool"
      | "priceAggregator"
      | "removeTradingContract"
      | "reqID_pendingMarketOrder"
      | "reqID_pendingNftOrder"
      | "setCallbacks"
      | "setDev"
      | "setGov"
      | "setMaxOpenInterestDai"
      | "setMaxPendingMarketOrders"
      | "setMaxTradesPerPair"
      | "setNftSuccessTimelock"
      | "setPool"
      | "setPriceAggregator"
      | "setSpreadReductionsP"
      | "setTrading"
      | "setVault"
      | "spreadReductionsP"
      | "storeOpenLimitOrder"
      | "storePendingMarketOrder"
      | "storePendingNftOrder"
      | "storeTrade"
      | "supportedTokens"
      | "token"
      | "tokensBurned"
      | "tokensMinted"
      | "trading"
      | "transferDai"
      | "transferLinkToAggregator"
      | "unregisterOpenLimitOrder"
      | "unregisterPendingMarketOrder"
      | "unregisterPendingNftOrder"
      | "unregisterTrade"
      | "updateNfts"
      | "updateOpenLimitOrder"
      | "updateSl"
      | "updateToken"
      | "updateTp"
      | "updateTrade"
      | "vault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addSupportedToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addTradingContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "callbacks", values?: undefined): string;
  encodeFunctionData(functionFragment: "claimFees", values?: undefined): string;
  encodeFunctionData(functionFragment: "dai", values?: undefined): string;
  encodeFunctionData(functionFragment: "dev", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "devFeesDai",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devFeesToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeLpRewards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "firstEmptyOpenLimitIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "firstEmptyTradeIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenLimitOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenLimitOrders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingOrderIds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpreadReductionsArray",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "govFeesDai",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "govFeesToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "handleDevGovFees",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "handleTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasOpenLimitOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseNftRewards",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isTradingContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "linkErc677",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPendingMarketOrders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTradesPerPair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftLastSuccess",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nftRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftSuccessTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nfts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "openInterestDai",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "openLimitOrderIds",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openLimitOrders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "openLimitOrdersCount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "openTrades",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openTradesCount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "openTradesInfo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pairTraders",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pairTradersArray",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pairTradersId",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingMarketCloseCount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingMarketOpenCount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOrderIds",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOrderIdsCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceAggregator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeTradingContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "reqID_pendingMarketOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "reqID_pendingNftOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCallbacks",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDev",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGov",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxOpenInterestDai",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPendingMarketOrders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTradesPerPair",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftSuccessTimelock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceAggregator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadReductionsP",
    values: [
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrading",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "spreadReductionsP",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "storeOpenLimitOrder",
    values: [GNSTradingStorageV5.OpenLimitOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "storePendingMarketOrder",
    values: [
      GNSTradingStorageV5.PendingMarketOrderStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "storePendingNftOrder",
    values: [
      GNSTradingStorageV5.PendingNftOrderStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "storeTrade",
    values: [
      GNSTradingStorageV5.TradeStruct,
      GNSTradingStorageV5.TradeInfoStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokensBurned",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensMinted",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "trading", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferDai",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLinkToAggregator",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterOpenLimitOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterPendingMarketOrder",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterPendingNftOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterTrade",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNfts",
    values: [
      [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOpenLimitOrder",
    values: [GNSTradingStorageV5.OpenLimitOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSl",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTp",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTrade",
    values: [GNSTradingStorageV5.TradeStruct]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addSupportedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTradingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "callbacks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dev", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devFeesDai", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "devFeesToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeLpRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstEmptyOpenLimitIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstEmptyTradeIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenLimitOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingOrderIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpreadReductionsArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "govFeesDai", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "govFeesToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleDevGovFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasOpenLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseNftRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTradingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "linkErc677", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxPendingMarketOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTradesPerPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftLastSuccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftSuccessTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nfts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openInterestDai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openLimitOrderIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openLimitOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openLimitOrdersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openTrades", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openTradesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openTradesInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pairTraders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pairTradersArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pairTradersId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingMarketCloseCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingMarketOpenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingOrderIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingOrderIdsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTradingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reqID_pendingMarketOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reqID_pendingNftOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCallbacks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDev", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxOpenInterestDai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPendingMarketOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTradesPerPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftSuccessTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPriceAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadReductionsP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTrading", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "spreadReductionsP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeOpenLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storePendingMarketOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storePendingNftOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "storeTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensBurned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trading", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferDai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferLinkToAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterOpenLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterPendingMarketOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterPendingNftOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateNfts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOpenLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateSl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateTp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "AddressUpdated(string,address)": EventFragment;
    "NftsUpdated(address[5])": EventFragment;
    "NumberUpdated(string,uint256)": EventFragment;
    "NumberUpdatedPair(string,uint256,uint256)": EventFragment;
    "SpreadReductionsUpdated(uint256[5])": EventFragment;
    "SupportedTokenAdded(address)": EventFragment;
    "TradingContractAdded(address)": EventFragment;
    "TradingContractRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NumberUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NumberUpdatedPair"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpreadReductionsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupportedTokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradingContractAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradingContractRemoved"): EventFragment;
}

export interface AddressUpdatedEventObject {
  name: string;
  a: string;
}
export type AddressUpdatedEvent = TypedEvent<
  [string, string],
  AddressUpdatedEventObject
>;

export type AddressUpdatedEventFilter = TypedEventFilter<AddressUpdatedEvent>;

export interface NftsUpdatedEventObject {
  nfts: [string, string, string, string, string];
}
export type NftsUpdatedEvent = TypedEvent<
  [[string, string, string, string, string]],
  NftsUpdatedEventObject
>;

export type NftsUpdatedEventFilter = TypedEventFilter<NftsUpdatedEvent>;

export interface NumberUpdatedEventObject {
  name: string;
  value: BigNumber;
}
export type NumberUpdatedEvent = TypedEvent<
  [string, BigNumber],
  NumberUpdatedEventObject
>;

export type NumberUpdatedEventFilter = TypedEventFilter<NumberUpdatedEvent>;

export interface NumberUpdatedPairEventObject {
  name: string;
  pairIndex: BigNumber;
  value: BigNumber;
}
export type NumberUpdatedPairEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  NumberUpdatedPairEventObject
>;

export type NumberUpdatedPairEventFilter =
  TypedEventFilter<NumberUpdatedPairEvent>;

export interface SpreadReductionsUpdatedEventObject {
  arg0: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
}
export type SpreadReductionsUpdatedEvent = TypedEvent<
  [[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]],
  SpreadReductionsUpdatedEventObject
>;

export type SpreadReductionsUpdatedEventFilter =
  TypedEventFilter<SpreadReductionsUpdatedEvent>;

export interface SupportedTokenAddedEventObject {
  a: string;
}
export type SupportedTokenAddedEvent = TypedEvent<
  [string],
  SupportedTokenAddedEventObject
>;

export type SupportedTokenAddedEventFilter =
  TypedEventFilter<SupportedTokenAddedEvent>;

export interface TradingContractAddedEventObject {
  a: string;
}
export type TradingContractAddedEvent = TypedEvent<
  [string],
  TradingContractAddedEventObject
>;

export type TradingContractAddedEventFilter =
  TypedEventFilter<TradingContractAddedEvent>;

export interface TradingContractRemovedEventObject {
  a: string;
}
export type TradingContractRemovedEvent = TypedEvent<
  [string],
  TradingContractRemovedEventObject
>;

export type TradingContractRemovedEventFilter =
  TypedEventFilter<TradingContractRemovedEvent>;

export interface GNSTradingStorageV5 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GNSTradingStorageV5Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    addSupportedToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTradingContract(
      _trading: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    callbacks(overrides?: CallOverrides): Promise<[string]>;

    claimFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dai(overrides?: CallOverrides): Promise<[string]>;

    dev(overrides?: CallOverrides): Promise<[string]>;

    devFeesDai(overrides?: CallOverrides): Promise<[BigNumber]>;

    devFeesToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    distributeLpRewards(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    firstEmptyOpenLimitIndex(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { index: BigNumber }>;

    firstEmptyTradeIndex(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { index: BigNumber }>;

    getOpenLimitOrder(
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[GNSTradingStorageV5.OpenLimitOrderStructOutput]>;

    getOpenLimitOrders(
      overrides?: CallOverrides
    ): Promise<[GNSTradingStorageV5.OpenLimitOrderStructOutput[]]>;

    getPendingOrderIds(
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getSpreadReductionsArray(
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]]>;

    getSupportedTokens(overrides?: CallOverrides): Promise<[string[]]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    govFeesDai(overrides?: CallOverrides): Promise<[BigNumber]>;

    govFeesToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    handleDevGovFees(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _leveragedPositionSize: PromiseOrValue<BigNumberish>,
      _dai: PromiseOrValue<boolean>,
      _fullFee: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    handleTokens(
      _a: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _mint: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasOpenLimitOrder(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    increaseNftRewards(
      _nftId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _dai: PromiseOrValue<string>,
      _linkErc677: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _nfts: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _gov: PromiseOrValue<string>,
      _dev: PromiseOrValue<string>,
      _nftSuccessTimelock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isTradingContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    linkErc677(overrides?: CallOverrides): Promise<[string]>;

    maxPendingMarketOrders(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTradesPerPair(overrides?: CallOverrides): Promise<[BigNumber]>;

    nftLastSuccess(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nftRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    nftSuccessTimelock(overrides?: CallOverrides): Promise<[BigNumber]>;

    nfts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    openInterestDai(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    openLimitOrderIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    openLimitOrders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        trader: string;
        pairIndex: BigNumber;
        index: BigNumber;
        positionSize: BigNumber;
        spreadReductionP: BigNumber;
        buy: boolean;
        leverage: BigNumber;
        tp: BigNumber;
        sl: BigNumber;
        minPrice: BigNumber;
        maxPrice: BigNumber;
        block: BigNumber;
        tokenId: BigNumber;
      }
    >;

    openLimitOrdersCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    openTrades(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        trader: string;
        pairIndex: BigNumber;
        index: BigNumber;
        initialPosToken: BigNumber;
        positionSizeDai: BigNumber;
        openPrice: BigNumber;
        buy: boolean;
        leverage: BigNumber;
        tp: BigNumber;
        sl: BigNumber;
      }
    >;

    openTradesCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    openTradesInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        tokenId: BigNumber;
        tokenPriceDai: BigNumber;
        openInterestDai: BigNumber;
        tpLastUpdated: BigNumber;
        slLastUpdated: BigNumber;
        beingMarketClosed: boolean;
      }
    >;

    pairTraders(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pairTradersArray(
      _pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    pairTradersId(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingMarketCloseCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingMarketOpenCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingOrderIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingOrderIdsCount(
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    priceAggregator(overrides?: CallOverrides): Promise<[string]>;

    removeTradingContract(
      _trading: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reqID_pendingMarketOrder(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        GNSTradingStorageV5.TradeStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        trade: GNSTradingStorageV5.TradeStructOutput;
        block: BigNumber;
        wantedPrice: BigNumber;
        slippageP: BigNumber;
        spreadReductionP: BigNumber;
        tokenId: BigNumber;
      }
    >;

    reqID_pendingNftOrder(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber, BigNumber, number] & {
        nftHolder: string;
        nftId: BigNumber;
        trader: string;
        pairIndex: BigNumber;
        index: BigNumber;
        orderType: number;
      }
    >;

    setCallbacks(
      _callbacks: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDev(
      _dev: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxOpenInterestDai(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _newMaxOpenInterest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxPendingMarketOrders(
      _maxPendingMarketOrders: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxTradesPerPair(
      _maxTradesPerPair: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNftSuccessTimelock(
      _blocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPool(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceAggregator(
      _aggregator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSpreadReductionsP(
      _r: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTrading(
      _trading: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    spreadReductionsP(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    storeOpenLimitOrder(
      o: GNSTradingStorageV5.OpenLimitOrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storePendingMarketOrder(
      _order: GNSTradingStorageV5.PendingMarketOrderStruct,
      _id: PromiseOrValue<BigNumberish>,
      _open: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storePendingNftOrder(
      _nftOrder: GNSTradingStorageV5.PendingNftOrderStruct,
      _orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storeTrade(
      _trade: GNSTradingStorageV5.TradeStruct,
      _tradeInfo: GNSTradingStorageV5.TradeInfoStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokensBurned(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensMinted(overrides?: CallOverrides): Promise<[BigNumber]>;

    trading(overrides?: CallOverrides): Promise<[string]>;

    transferDai(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferLinkToAggregator(
      _from: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _leveragedPosDai: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unregisterOpenLimitOrder(
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unregisterPendingMarketOrder(
      _id: PromiseOrValue<BigNumberish>,
      _open: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unregisterPendingNftOrder(
      _order: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unregisterTrade(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateNfts(
      _nfts: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateOpenLimitOrder(
      _o: GNSTradingStorageV5.OpenLimitOrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSl(
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _newSl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateToken(
      _newToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTp(
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _newTp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTrade(
      _t: GNSTradingStorageV5.TradeStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  addSupportedToken(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTradingContract(
    _trading: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callbacks(overrides?: CallOverrides): Promise<string>;

  claimFees(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dai(overrides?: CallOverrides): Promise<string>;

  dev(overrides?: CallOverrides): Promise<string>;

  devFeesDai(overrides?: CallOverrides): Promise<BigNumber>;

  devFeesToken(overrides?: CallOverrides): Promise<BigNumber>;

  distributeLpRewards(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  firstEmptyOpenLimitIndex(
    trader: PromiseOrValue<string>,
    pairIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  firstEmptyTradeIndex(
    trader: PromiseOrValue<string>,
    pairIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOpenLimitOrder(
    _trader: PromiseOrValue<string>,
    _pairIndex: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<GNSTradingStorageV5.OpenLimitOrderStructOutput>;

  getOpenLimitOrders(
    overrides?: CallOverrides
  ): Promise<GNSTradingStorageV5.OpenLimitOrderStructOutput[]>;

  getPendingOrderIds(
    _trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getSpreadReductionsArray(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  getSupportedTokens(overrides?: CallOverrides): Promise<string[]>;

  gov(overrides?: CallOverrides): Promise<string>;

  govFeesDai(overrides?: CallOverrides): Promise<BigNumber>;

  govFeesToken(overrides?: CallOverrides): Promise<BigNumber>;

  handleDevGovFees(
    _pairIndex: PromiseOrValue<BigNumberish>,
    _leveragedPositionSize: PromiseOrValue<BigNumberish>,
    _dai: PromiseOrValue<boolean>,
    _fullFee: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  handleTokens(
    _a: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _mint: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasOpenLimitOrder(
    trader: PromiseOrValue<string>,
    pairIndex: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseNftRewards(
    _nftId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _dai: PromiseOrValue<string>,
    _linkErc677: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _nfts: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ],
    _gov: PromiseOrValue<string>,
    _dev: PromiseOrValue<string>,
    _nftSuccessTimelock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isTradingContract(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  linkErc677(overrides?: CallOverrides): Promise<string>;

  maxPendingMarketOrders(overrides?: CallOverrides): Promise<BigNumber>;

  maxTradesPerPair(overrides?: CallOverrides): Promise<BigNumber>;

  nftLastSuccess(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nftRewards(overrides?: CallOverrides): Promise<BigNumber>;

  nftSuccessTimelock(overrides?: CallOverrides): Promise<BigNumber>;

  nfts(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  openInterestDai(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  openLimitOrderIds(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  openLimitOrders(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      trader: string;
      pairIndex: BigNumber;
      index: BigNumber;
      positionSize: BigNumber;
      spreadReductionP: BigNumber;
      buy: boolean;
      leverage: BigNumber;
      tp: BigNumber;
      sl: BigNumber;
      minPrice: BigNumber;
      maxPrice: BigNumber;
      block: BigNumber;
      tokenId: BigNumber;
    }
  >;

  openLimitOrdersCount(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  openTrades(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      trader: string;
      pairIndex: BigNumber;
      index: BigNumber;
      initialPosToken: BigNumber;
      positionSizeDai: BigNumber;
      openPrice: BigNumber;
      buy: boolean;
      leverage: BigNumber;
      tp: BigNumber;
      sl: BigNumber;
    }
  >;

  openTradesCount(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  openTradesInfo(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      tokenId: BigNumber;
      tokenPriceDai: BigNumber;
      openInterestDai: BigNumber;
      tpLastUpdated: BigNumber;
      slLastUpdated: BigNumber;
      beingMarketClosed: boolean;
    }
  >;

  pairTraders(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  pairTradersArray(
    _pairIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  pairTradersId(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingMarketCloseCount(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingMarketOpenCount(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingOrderIds(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingOrderIdsCount(
    _trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pool(overrides?: CallOverrides): Promise<string>;

  priceAggregator(overrides?: CallOverrides): Promise<string>;

  removeTradingContract(
    _trading: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reqID_pendingMarketOrder(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      GNSTradingStorageV5.TradeStructOutput,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      trade: GNSTradingStorageV5.TradeStructOutput;
      block: BigNumber;
      wantedPrice: BigNumber;
      slippageP: BigNumber;
      spreadReductionP: BigNumber;
      tokenId: BigNumber;
    }
  >;

  reqID_pendingNftOrder(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, BigNumber, BigNumber, number] & {
      nftHolder: string;
      nftId: BigNumber;
      trader: string;
      pairIndex: BigNumber;
      index: BigNumber;
      orderType: number;
    }
  >;

  setCallbacks(
    _callbacks: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDev(
    _dev: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGov(
    _gov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxOpenInterestDai(
    _pairIndex: PromiseOrValue<BigNumberish>,
    _newMaxOpenInterest: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxPendingMarketOrders(
    _maxPendingMarketOrders: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxTradesPerPair(
    _maxTradesPerPair: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNftSuccessTimelock(
    _blocks: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPool(
    _pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceAggregator(
    _aggregator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSpreadReductionsP(
    _r: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTrading(
    _trading: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVault(
    _vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  spreadReductionsP(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  storeOpenLimitOrder(
    o: GNSTradingStorageV5.OpenLimitOrderStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storePendingMarketOrder(
    _order: GNSTradingStorageV5.PendingMarketOrderStruct,
    _id: PromiseOrValue<BigNumberish>,
    _open: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storePendingNftOrder(
    _nftOrder: GNSTradingStorageV5.PendingNftOrderStruct,
    _orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storeTrade(
    _trade: GNSTradingStorageV5.TradeStruct,
    _tradeInfo: GNSTradingStorageV5.TradeInfoStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportedTokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  tokensBurned(overrides?: CallOverrides): Promise<BigNumber>;

  tokensMinted(overrides?: CallOverrides): Promise<BigNumber>;

  trading(overrides?: CallOverrides): Promise<string>;

  transferDai(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferLinkToAggregator(
    _from: PromiseOrValue<string>,
    _pairIndex: PromiseOrValue<BigNumberish>,
    _leveragedPosDai: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unregisterOpenLimitOrder(
    _trader: PromiseOrValue<string>,
    _pairIndex: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unregisterPendingMarketOrder(
    _id: PromiseOrValue<BigNumberish>,
    _open: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unregisterPendingNftOrder(
    _order: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unregisterTrade(
    trader: PromiseOrValue<string>,
    pairIndex: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateNfts(
    _nfts: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateOpenLimitOrder(
    _o: GNSTradingStorageV5.OpenLimitOrderStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSl(
    _trader: PromiseOrValue<string>,
    _pairIndex: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    _newSl: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateToken(
    _newToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTp(
    _trader: PromiseOrValue<string>,
    _pairIndex: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    _newTp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTrade(
    _t: GNSTradingStorageV5.TradeStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    addSupportedToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addTradingContract(
      _trading: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    callbacks(overrides?: CallOverrides): Promise<string>;

    claimFees(overrides?: CallOverrides): Promise<void>;

    dai(overrides?: CallOverrides): Promise<string>;

    dev(overrides?: CallOverrides): Promise<string>;

    devFeesDai(overrides?: CallOverrides): Promise<BigNumber>;

    devFeesToken(overrides?: CallOverrides): Promise<BigNumber>;

    distributeLpRewards(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    firstEmptyOpenLimitIndex(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    firstEmptyTradeIndex(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenLimitOrder(
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<GNSTradingStorageV5.OpenLimitOrderStructOutput>;

    getOpenLimitOrders(
      overrides?: CallOverrides
    ): Promise<GNSTradingStorageV5.OpenLimitOrderStructOutput[]>;

    getPendingOrderIds(
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getSpreadReductionsArray(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getSupportedTokens(overrides?: CallOverrides): Promise<string[]>;

    gov(overrides?: CallOverrides): Promise<string>;

    govFeesDai(overrides?: CallOverrides): Promise<BigNumber>;

    govFeesToken(overrides?: CallOverrides): Promise<BigNumber>;

    handleDevGovFees(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _leveragedPositionSize: PromiseOrValue<BigNumberish>,
      _dai: PromiseOrValue<boolean>,
      _fullFee: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handleTokens(
      _a: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _mint: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasOpenLimitOrder(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseNftRewards(
      _nftId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _dai: PromiseOrValue<string>,
      _linkErc677: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _nfts: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _gov: PromiseOrValue<string>,
      _dev: PromiseOrValue<string>,
      _nftSuccessTimelock: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isTradingContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    linkErc677(overrides?: CallOverrides): Promise<string>;

    maxPendingMarketOrders(overrides?: CallOverrides): Promise<BigNumber>;

    maxTradesPerPair(overrides?: CallOverrides): Promise<BigNumber>;

    nftLastSuccess(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftRewards(overrides?: CallOverrides): Promise<BigNumber>;

    nftSuccessTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    nfts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    openInterestDai(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openLimitOrderIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openLimitOrders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        trader: string;
        pairIndex: BigNumber;
        index: BigNumber;
        positionSize: BigNumber;
        spreadReductionP: BigNumber;
        buy: boolean;
        leverage: BigNumber;
        tp: BigNumber;
        sl: BigNumber;
        minPrice: BigNumber;
        maxPrice: BigNumber;
        block: BigNumber;
        tokenId: BigNumber;
      }
    >;

    openLimitOrdersCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openTrades(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        trader: string;
        pairIndex: BigNumber;
        index: BigNumber;
        initialPosToken: BigNumber;
        positionSizeDai: BigNumber;
        openPrice: BigNumber;
        buy: boolean;
        leverage: BigNumber;
        tp: BigNumber;
        sl: BigNumber;
      }
    >;

    openTradesCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openTradesInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        tokenId: BigNumber;
        tokenPriceDai: BigNumber;
        openInterestDai: BigNumber;
        tpLastUpdated: BigNumber;
        slLastUpdated: BigNumber;
        beingMarketClosed: boolean;
      }
    >;

    pairTraders(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    pairTradersArray(
      _pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    pairTradersId(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingMarketCloseCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingMarketOpenCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingOrderIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingOrderIdsCount(
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<string>;

    priceAggregator(overrides?: CallOverrides): Promise<string>;

    removeTradingContract(
      _trading: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    reqID_pendingMarketOrder(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        GNSTradingStorageV5.TradeStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        trade: GNSTradingStorageV5.TradeStructOutput;
        block: BigNumber;
        wantedPrice: BigNumber;
        slippageP: BigNumber;
        spreadReductionP: BigNumber;
        tokenId: BigNumber;
      }
    >;

    reqID_pendingNftOrder(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber, BigNumber, number] & {
        nftHolder: string;
        nftId: BigNumber;
        trader: string;
        pairIndex: BigNumber;
        index: BigNumber;
        orderType: number;
      }
    >;

    setCallbacks(
      _callbacks: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDev(
      _dev: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxOpenInterestDai(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _newMaxOpenInterest: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPendingMarketOrders(
      _maxPendingMarketOrders: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTradesPerPair(
      _maxTradesPerPair: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNftSuccessTimelock(
      _blocks: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPool(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceAggregator(
      _aggregator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpreadReductionsP(
      _r: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    setTrading(
      _trading: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    spreadReductionsP(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    storeOpenLimitOrder(
      o: GNSTradingStorageV5.OpenLimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    storePendingMarketOrder(
      _order: GNSTradingStorageV5.PendingMarketOrderStruct,
      _id: PromiseOrValue<BigNumberish>,
      _open: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    storePendingNftOrder(
      _nftOrder: GNSTradingStorageV5.PendingNftOrderStruct,
      _orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    storeTrade(
      _trade: GNSTradingStorageV5.TradeStruct,
      _tradeInfo: GNSTradingStorageV5.TradeInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    supportedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    tokensBurned(overrides?: CallOverrides): Promise<BigNumber>;

    tokensMinted(overrides?: CallOverrides): Promise<BigNumber>;

    trading(overrides?: CallOverrides): Promise<string>;

    transferDai(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferLinkToAggregator(
      _from: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _leveragedPosDai: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterOpenLimitOrder(
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterPendingMarketOrder(
      _id: PromiseOrValue<BigNumberish>,
      _open: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterPendingNftOrder(
      _order: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterTrade(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateNfts(
      _nfts: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    updateOpenLimitOrder(
      _o: GNSTradingStorageV5.OpenLimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSl(
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _newSl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateToken(
      _newToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTp(
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _newTp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTrade(
      _t: GNSTradingStorageV5.TradeStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AddressUpdated(string,address)"(
      name?: null,
      a?: null
    ): AddressUpdatedEventFilter;
    AddressUpdated(name?: null, a?: null): AddressUpdatedEventFilter;

    "NftsUpdated(address[5])"(nfts?: null): NftsUpdatedEventFilter;
    NftsUpdated(nfts?: null): NftsUpdatedEventFilter;

    "NumberUpdated(string,uint256)"(
      name?: null,
      value?: null
    ): NumberUpdatedEventFilter;
    NumberUpdated(name?: null, value?: null): NumberUpdatedEventFilter;

    "NumberUpdatedPair(string,uint256,uint256)"(
      name?: null,
      pairIndex?: null,
      value?: null
    ): NumberUpdatedPairEventFilter;
    NumberUpdatedPair(
      name?: null,
      pairIndex?: null,
      value?: null
    ): NumberUpdatedPairEventFilter;

    "SpreadReductionsUpdated(uint256[5])"(
      arg0?: null
    ): SpreadReductionsUpdatedEventFilter;
    SpreadReductionsUpdated(arg0?: null): SpreadReductionsUpdatedEventFilter;

    "SupportedTokenAdded(address)"(a?: null): SupportedTokenAddedEventFilter;
    SupportedTokenAdded(a?: null): SupportedTokenAddedEventFilter;

    "TradingContractAdded(address)"(a?: null): TradingContractAddedEventFilter;
    TradingContractAdded(a?: null): TradingContractAddedEventFilter;

    "TradingContractRemoved(address)"(
      a?: null
    ): TradingContractRemovedEventFilter;
    TradingContractRemoved(a?: null): TradingContractRemovedEventFilter;
  };

  estimateGas: {
    MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    addSupportedToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTradingContract(
      _trading: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    callbacks(overrides?: CallOverrides): Promise<BigNumber>;

    claimFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dai(overrides?: CallOverrides): Promise<BigNumber>;

    dev(overrides?: CallOverrides): Promise<BigNumber>;

    devFeesDai(overrides?: CallOverrides): Promise<BigNumber>;

    devFeesToken(overrides?: CallOverrides): Promise<BigNumber>;

    distributeLpRewards(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    firstEmptyOpenLimitIndex(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    firstEmptyTradeIndex(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenLimitOrder(
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenLimitOrders(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingOrderIds(
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpreadReductionsArray(overrides?: CallOverrides): Promise<BigNumber>;

    getSupportedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    govFeesDai(overrides?: CallOverrides): Promise<BigNumber>;

    govFeesToken(overrides?: CallOverrides): Promise<BigNumber>;

    handleDevGovFees(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _leveragedPositionSize: PromiseOrValue<BigNumberish>,
      _dai: PromiseOrValue<boolean>,
      _fullFee: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    handleTokens(
      _a: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _mint: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasOpenLimitOrder(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseNftRewards(
      _nftId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _dai: PromiseOrValue<string>,
      _linkErc677: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _nfts: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _gov: PromiseOrValue<string>,
      _dev: PromiseOrValue<string>,
      _nftSuccessTimelock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isTradingContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linkErc677(overrides?: CallOverrides): Promise<BigNumber>;

    maxPendingMarketOrders(overrides?: CallOverrides): Promise<BigNumber>;

    maxTradesPerPair(overrides?: CallOverrides): Promise<BigNumber>;

    nftLastSuccess(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftRewards(overrides?: CallOverrides): Promise<BigNumber>;

    nftSuccessTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    nfts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openInterestDai(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openLimitOrderIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openLimitOrders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openLimitOrdersCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openTrades(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openTradesCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openTradesInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pairTraders(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pairTradersArray(
      _pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pairTradersId(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingMarketCloseCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingMarketOpenCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingOrderIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingOrderIdsCount(
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    priceAggregator(overrides?: CallOverrides): Promise<BigNumber>;

    removeTradingContract(
      _trading: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reqID_pendingMarketOrder(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reqID_pendingNftOrder(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCallbacks(
      _callbacks: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDev(
      _dev: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxOpenInterestDai(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _newMaxOpenInterest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxPendingMarketOrders(
      _maxPendingMarketOrders: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxTradesPerPair(
      _maxTradesPerPair: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNftSuccessTimelock(
      _blocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPool(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceAggregator(
      _aggregator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSpreadReductionsP(
      _r: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTrading(
      _trading: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    spreadReductionsP(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    storeOpenLimitOrder(
      o: GNSTradingStorageV5.OpenLimitOrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storePendingMarketOrder(
      _order: GNSTradingStorageV5.PendingMarketOrderStruct,
      _id: PromiseOrValue<BigNumberish>,
      _open: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storePendingNftOrder(
      _nftOrder: GNSTradingStorageV5.PendingNftOrderStruct,
      _orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storeTrade(
      _trade: GNSTradingStorageV5.TradeStruct,
      _tradeInfo: GNSTradingStorageV5.TradeInfoStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokensBurned(overrides?: CallOverrides): Promise<BigNumber>;

    tokensMinted(overrides?: CallOverrides): Promise<BigNumber>;

    trading(overrides?: CallOverrides): Promise<BigNumber>;

    transferDai(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferLinkToAggregator(
      _from: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _leveragedPosDai: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unregisterOpenLimitOrder(
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unregisterPendingMarketOrder(
      _id: PromiseOrValue<BigNumberish>,
      _open: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unregisterPendingNftOrder(
      _order: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unregisterTrade(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateNfts(
      _nfts: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateOpenLimitOrder(
      _o: GNSTradingStorageV5.OpenLimitOrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSl(
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _newSl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateToken(
      _newToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTp(
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _newTp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTrade(
      _t: GNSTradingStorageV5.TradeStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addSupportedToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTradingContract(
      _trading: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    callbacks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dev(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devFeesDai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devFeesToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributeLpRewards(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    firstEmptyOpenLimitIndex(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    firstEmptyTradeIndex(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenLimitOrder(
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenLimitOrders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingOrderIds(
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpreadReductionsArray(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupportedTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    govFeesDai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    govFeesToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    handleDevGovFees(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _leveragedPositionSize: PromiseOrValue<BigNumberish>,
      _dai: PromiseOrValue<boolean>,
      _fullFee: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    handleTokens(
      _a: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _mint: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasOpenLimitOrder(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseNftRewards(
      _nftId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _dai: PromiseOrValue<string>,
      _linkErc677: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _nfts: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _gov: PromiseOrValue<string>,
      _dev: PromiseOrValue<string>,
      _nftSuccessTimelock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isTradingContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linkErc677(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxPendingMarketOrders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTradesPerPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftLastSuccess(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftSuccessTimelock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nfts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openInterestDai(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openLimitOrderIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openLimitOrders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openLimitOrdersCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openTrades(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openTradesCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openTradesInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairTraders(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairTradersArray(
      _pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairTradersId(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingMarketCloseCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingMarketOpenCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingOrderIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingOrderIdsCount(
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceAggregator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeTradingContract(
      _trading: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reqID_pendingMarketOrder(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reqID_pendingNftOrder(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCallbacks(
      _callbacks: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDev(
      _dev: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxOpenInterestDai(
      _pairIndex: PromiseOrValue<BigNumberish>,
      _newMaxOpenInterest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPendingMarketOrders(
      _maxPendingMarketOrders: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTradesPerPair(
      _maxTradesPerPair: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNftSuccessTimelock(
      _blocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPool(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceAggregator(
      _aggregator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSpreadReductionsP(
      _r: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTrading(
      _trading: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    spreadReductionsP(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    storeOpenLimitOrder(
      o: GNSTradingStorageV5.OpenLimitOrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storePendingMarketOrder(
      _order: GNSTradingStorageV5.PendingMarketOrderStruct,
      _id: PromiseOrValue<BigNumberish>,
      _open: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storePendingNftOrder(
      _nftOrder: GNSTradingStorageV5.PendingNftOrderStruct,
      _orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storeTrade(
      _trade: GNSTradingStorageV5.TradeStruct,
      _tradeInfo: GNSTradingStorageV5.TradeInfoStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensBurned(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensMinted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trading(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferDai(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferLinkToAggregator(
      _from: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _leveragedPosDai: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unregisterOpenLimitOrder(
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unregisterPendingMarketOrder(
      _id: PromiseOrValue<BigNumberish>,
      _open: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unregisterPendingNftOrder(
      _order: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unregisterTrade(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateNfts(
      _nfts: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateOpenLimitOrder(
      _o: GNSTradingStorageV5.OpenLimitOrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSl(
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _newSl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateToken(
      _newToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTp(
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _newTp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTrade(
      _t: GNSTradingStorageV5.TradeStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
