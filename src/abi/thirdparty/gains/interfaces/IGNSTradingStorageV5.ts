/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IGNSTradingStorageV5 {
  export type OpenLimitOrderStruct = {
    trader: PromiseOrValue<string>;
    pairIndex: PromiseOrValue<BigNumberish>;
    index: PromiseOrValue<BigNumberish>;
    positionSize: PromiseOrValue<BigNumberish>;
    spreadReductionP: PromiseOrValue<BigNumberish>;
    buy: PromiseOrValue<boolean>;
    leverage: PromiseOrValue<BigNumberish>;
    tp: PromiseOrValue<BigNumberish>;
    sl: PromiseOrValue<BigNumberish>;
    minPrice: PromiseOrValue<BigNumberish>;
    maxPrice: PromiseOrValue<BigNumberish>;
    block: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BigNumberish>;
  };

  export type OpenLimitOrderStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    trader: string;
    pairIndex: BigNumber;
    index: BigNumber;
    positionSize: BigNumber;
    spreadReductionP: BigNumber;
    buy: boolean;
    leverage: BigNumber;
    tp: BigNumber;
    sl: BigNumber;
    minPrice: BigNumber;
    maxPrice: BigNumber;
    block: BigNumber;
    tokenId: BigNumber;
  };

  export type TradeStruct = {
    trader: PromiseOrValue<string>;
    pairIndex: PromiseOrValue<BigNumberish>;
    index: PromiseOrValue<BigNumberish>;
    initialPosToken: PromiseOrValue<BigNumberish>;
    positionSizeDai: PromiseOrValue<BigNumberish>;
    openPrice: PromiseOrValue<BigNumberish>;
    buy: PromiseOrValue<boolean>;
    leverage: PromiseOrValue<BigNumberish>;
    tp: PromiseOrValue<BigNumberish>;
    sl: PromiseOrValue<BigNumberish>;
  };

  export type TradeStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    trader: string;
    pairIndex: BigNumber;
    index: BigNumber;
    initialPosToken: BigNumber;
    positionSizeDai: BigNumber;
    openPrice: BigNumber;
    buy: boolean;
    leverage: BigNumber;
    tp: BigNumber;
    sl: BigNumber;
  };

  export type TradeInfoStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    tokenPriceDai: PromiseOrValue<BigNumberish>;
    openInterestDai: PromiseOrValue<BigNumberish>;
    tpLastUpdated: PromiseOrValue<BigNumberish>;
    slLastUpdated: PromiseOrValue<BigNumberish>;
    beingMarketClosed: PromiseOrValue<boolean>;
  };

  export type TradeInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    tokenId: BigNumber;
    tokenPriceDai: BigNumber;
    openInterestDai: BigNumber;
    tpLastUpdated: BigNumber;
    slLastUpdated: BigNumber;
    beingMarketClosed: boolean;
  };

  export type PendingMarketOrderStruct = {
    trade: IGNSTradingStorageV5.TradeStruct;
    block: PromiseOrValue<BigNumberish>;
    wantedPrice: PromiseOrValue<BigNumberish>;
    slippageP: PromiseOrValue<BigNumberish>;
    spreadReductionP: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BigNumberish>;
  };

  export type PendingMarketOrderStructOutput = [
    IGNSTradingStorageV5.TradeStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    trade: IGNSTradingStorageV5.TradeStructOutput;
    block: BigNumber;
    wantedPrice: BigNumber;
    slippageP: BigNumber;
    spreadReductionP: BigNumber;
    tokenId: BigNumber;
  };

  export type PendingNftOrderStruct = {
    nftHolder: PromiseOrValue<string>;
    nftId: PromiseOrValue<BigNumberish>;
    trader: PromiseOrValue<string>;
    pairIndex: PromiseOrValue<BigNumberish>;
    index: PromiseOrValue<BigNumberish>;
    orderType: PromiseOrValue<BigNumberish>;
  };

  export type PendingNftOrderStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    number
  ] & {
    nftHolder: string;
    nftId: BigNumber;
    trader: string;
    pairIndex: BigNumber;
    index: BigNumber;
    orderType: number;
  };
}

export interface IGNSTradingStorageV5Interface extends utils.Interface {
  functions: {
    "callbacks()": FunctionFragment;
    "dev()": FunctionFragment;
    "devFeesDai()": FunctionFragment;
    "devFeesToken()": FunctionFragment;
    "firstEmptyOpenLimitIndex(address,uint256)": FunctionFragment;
    "firstEmptyTradeIndex(address,uint256)": FunctionFragment;
    "getOpenLimitOrder(address,uint256,uint256)": FunctionFragment;
    "getOpenLimitOrders()": FunctionFragment;
    "getPendingOrderIds(address)": FunctionFragment;
    "getSpreadReductionsArray()": FunctionFragment;
    "getSupportedTokens()": FunctionFragment;
    "gov()": FunctionFragment;
    "govFeesDai()": FunctionFragment;
    "govFeesToken()": FunctionFragment;
    "hasOpenLimitOrder(address,uint256,uint256)": FunctionFragment;
    "isTradingContract(address)": FunctionFragment;
    "maxPendingMarketOrders()": FunctionFragment;
    "maxTradesPerPair()": FunctionFragment;
    "nftLastSuccess(uint256)": FunctionFragment;
    "nftRewards()": FunctionFragment;
    "nftSuccessTimelock()": FunctionFragment;
    "nfts()": FunctionFragment;
    "openInterestDai(uint256)": FunctionFragment;
    "openLimitOrderIds(address,uint256,uint256)": FunctionFragment;
    "openLimitOrders(uint256)": FunctionFragment;
    "openLimitOrdersCount(address,uint256)": FunctionFragment;
    "openTrades(address,uint256,uint256)": FunctionFragment;
    "openTradesCount(address,uint256)": FunctionFragment;
    "openTradesInfo(address,uint256,uint256)": FunctionFragment;
    "pairTraders(uint256,uint256)": FunctionFragment;
    "pairTradersArray(uint256)": FunctionFragment;
    "pairTradersId(address,uint256)": FunctionFragment;
    "pendingMarketCloseCount(address,uint256)": FunctionFragment;
    "pendingMarketOpenCount(address,uint256)": FunctionFragment;
    "pendingOrderIds(address,uint256)": FunctionFragment;
    "pendingOrderIdsCount(address)": FunctionFragment;
    "pool()": FunctionFragment;
    "priceAggregator()": FunctionFragment;
    "reqID_pendingMarketOrder(uint256)": FunctionFragment;
    "reqID_pendingNftOrder(uint256)": FunctionFragment;
    "spreadReductionsP()": FunctionFragment;
    "supportedTokens(uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "tokensBurned()": FunctionFragment;
    "tokensMinted()": FunctionFragment;
    "trading()": FunctionFragment;
    "vault()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "callbacks"
      | "dev"
      | "devFeesDai"
      | "devFeesToken"
      | "firstEmptyOpenLimitIndex"
      | "firstEmptyTradeIndex"
      | "getOpenLimitOrder"
      | "getOpenLimitOrders"
      | "getPendingOrderIds"
      | "getSpreadReductionsArray"
      | "getSupportedTokens"
      | "gov"
      | "govFeesDai"
      | "govFeesToken"
      | "hasOpenLimitOrder"
      | "isTradingContract"
      | "maxPendingMarketOrders"
      | "maxTradesPerPair"
      | "nftLastSuccess"
      | "nftRewards"
      | "nftSuccessTimelock"
      | "nfts"
      | "openInterestDai"
      | "openLimitOrderIds"
      | "openLimitOrders"
      | "openLimitOrdersCount"
      | "openTrades"
      | "openTradesCount"
      | "openTradesInfo"
      | "pairTraders"
      | "pairTradersArray"
      | "pairTradersId"
      | "pendingMarketCloseCount"
      | "pendingMarketOpenCount"
      | "pendingOrderIds"
      | "pendingOrderIdsCount"
      | "pool"
      | "priceAggregator"
      | "reqID_pendingMarketOrder"
      | "reqID_pendingNftOrder"
      | "spreadReductionsP"
      | "supportedTokens"
      | "token"
      | "tokensBurned"
      | "tokensMinted"
      | "trading"
      | "vault"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "callbacks", values?: undefined): string;
  encodeFunctionData(functionFragment: "dev", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "devFeesDai",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devFeesToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstEmptyOpenLimitIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "firstEmptyTradeIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenLimitOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenLimitOrders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingOrderIds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpreadReductionsArray",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "govFeesDai",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "govFeesToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasOpenLimitOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isTradingContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPendingMarketOrders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTradesPerPair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftLastSuccess",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nftRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftSuccessTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nfts", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "openInterestDai",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "openLimitOrderIds",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openLimitOrders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "openLimitOrdersCount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "openTrades",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openTradesCount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "openTradesInfo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pairTraders",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pairTradersArray",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pairTradersId",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingMarketCloseCount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingMarketOpenCount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOrderIds",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOrderIdsCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceAggregator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reqID_pendingMarketOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "reqID_pendingNftOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "spreadReductionsP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportedTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokensBurned",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensMinted",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "trading", values?: undefined): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(functionFragment: "callbacks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dev", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devFeesDai", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "devFeesToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstEmptyOpenLimitIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstEmptyTradeIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenLimitOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingOrderIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpreadReductionsArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "govFeesDai", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "govFeesToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasOpenLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTradingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPendingMarketOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTradesPerPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftLastSuccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftSuccessTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nfts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openInterestDai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openLimitOrderIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openLimitOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openLimitOrdersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openTrades", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openTradesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openTradesInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pairTraders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pairTradersArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pairTradersId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingMarketCloseCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingMarketOpenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingOrderIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingOrderIdsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reqID_pendingMarketOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reqID_pendingNftOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spreadReductionsP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensBurned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trading", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {};
}

export interface IGNSTradingStorageV5 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGNSTradingStorageV5Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    callbacks(overrides?: CallOverrides): Promise<[string]>;

    dev(overrides?: CallOverrides): Promise<[string]>;

    devFeesDai(overrides?: CallOverrides): Promise<[BigNumber]>;

    devFeesToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    firstEmptyOpenLimitIndex(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { index: BigNumber }>;

    firstEmptyTradeIndex(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { index: BigNumber }>;

    getOpenLimitOrder(
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IGNSTradingStorageV5.OpenLimitOrderStructOutput]>;

    getOpenLimitOrders(
      overrides?: CallOverrides
    ): Promise<[IGNSTradingStorageV5.OpenLimitOrderStructOutput[]]>;

    getPendingOrderIds(
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getSpreadReductionsArray(
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]]>;

    getSupportedTokens(overrides?: CallOverrides): Promise<[string[]]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    govFeesDai(overrides?: CallOverrides): Promise<[BigNumber]>;

    govFeesToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    hasOpenLimitOrder(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTradingContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxPendingMarketOrders(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTradesPerPair(overrides?: CallOverrides): Promise<[BigNumber]>;

    nftLastSuccess(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nftRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    nftSuccessTimelock(overrides?: CallOverrides): Promise<[BigNumber]>;

    nfts(
      overrides?: CallOverrides
    ): Promise<[[string, string, string, string, string]]>;

    openInterestDai(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber, BigNumber]]>;

    openLimitOrderIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    openLimitOrders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IGNSTradingStorageV5.OpenLimitOrderStructOutput]>;

    openLimitOrdersCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    openTrades(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IGNSTradingStorageV5.TradeStructOutput]>;

    openTradesCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    openTradesInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IGNSTradingStorageV5.TradeInfoStructOutput]>;

    pairTraders(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pairTradersArray(
      _pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    pairTradersId(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingMarketCloseCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingMarketOpenCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingOrderIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingOrderIdsCount(
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    priceAggregator(overrides?: CallOverrides): Promise<[string]>;

    reqID_pendingMarketOrder(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IGNSTradingStorageV5.PendingMarketOrderStructOutput]>;

    reqID_pendingNftOrder(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IGNSTradingStorageV5.PendingNftOrderStructOutput]>;

    spreadReductionsP(
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]]>;

    supportedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokensBurned(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensMinted(overrides?: CallOverrides): Promise<[BigNumber]>;

    trading(overrides?: CallOverrides): Promise<[string]>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  callbacks(overrides?: CallOverrides): Promise<string>;

  dev(overrides?: CallOverrides): Promise<string>;

  devFeesDai(overrides?: CallOverrides): Promise<BigNumber>;

  devFeesToken(overrides?: CallOverrides): Promise<BigNumber>;

  firstEmptyOpenLimitIndex(
    trader: PromiseOrValue<string>,
    pairIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  firstEmptyTradeIndex(
    trader: PromiseOrValue<string>,
    pairIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOpenLimitOrder(
    _trader: PromiseOrValue<string>,
    _pairIndex: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IGNSTradingStorageV5.OpenLimitOrderStructOutput>;

  getOpenLimitOrders(
    overrides?: CallOverrides
  ): Promise<IGNSTradingStorageV5.OpenLimitOrderStructOutput[]>;

  getPendingOrderIds(
    _trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getSpreadReductionsArray(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  getSupportedTokens(overrides?: CallOverrides): Promise<string[]>;

  gov(overrides?: CallOverrides): Promise<string>;

  govFeesDai(overrides?: CallOverrides): Promise<BigNumber>;

  govFeesToken(overrides?: CallOverrides): Promise<BigNumber>;

  hasOpenLimitOrder(
    trader: PromiseOrValue<string>,
    pairIndex: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTradingContract(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxPendingMarketOrders(overrides?: CallOverrides): Promise<BigNumber>;

  maxTradesPerPair(overrides?: CallOverrides): Promise<BigNumber>;

  nftLastSuccess(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nftRewards(overrides?: CallOverrides): Promise<BigNumber>;

  nftSuccessTimelock(overrides?: CallOverrides): Promise<BigNumber>;

  nfts(
    overrides?: CallOverrides
  ): Promise<[string, string, string, string, string]>;

  openInterestDai(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  openLimitOrderIds(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  openLimitOrders(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IGNSTradingStorageV5.OpenLimitOrderStructOutput>;

  openLimitOrdersCount(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  openTrades(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IGNSTradingStorageV5.TradeStructOutput>;

  openTradesCount(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  openTradesInfo(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IGNSTradingStorageV5.TradeInfoStructOutput>;

  pairTraders(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  pairTradersArray(
    _pairIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  pairTradersId(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingMarketCloseCount(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingMarketOpenCount(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingOrderIds(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingOrderIdsCount(
    _trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pool(overrides?: CallOverrides): Promise<string>;

  priceAggregator(overrides?: CallOverrides): Promise<string>;

  reqID_pendingMarketOrder(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IGNSTradingStorageV5.PendingMarketOrderStructOutput>;

  reqID_pendingNftOrder(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IGNSTradingStorageV5.PendingNftOrderStructOutput>;

  spreadReductionsP(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  supportedTokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  tokensBurned(overrides?: CallOverrides): Promise<BigNumber>;

  tokensMinted(overrides?: CallOverrides): Promise<BigNumber>;

  trading(overrides?: CallOverrides): Promise<string>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    callbacks(overrides?: CallOverrides): Promise<string>;

    dev(overrides?: CallOverrides): Promise<string>;

    devFeesDai(overrides?: CallOverrides): Promise<BigNumber>;

    devFeesToken(overrides?: CallOverrides): Promise<BigNumber>;

    firstEmptyOpenLimitIndex(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    firstEmptyTradeIndex(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenLimitOrder(
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IGNSTradingStorageV5.OpenLimitOrderStructOutput>;

    getOpenLimitOrders(
      overrides?: CallOverrides
    ): Promise<IGNSTradingStorageV5.OpenLimitOrderStructOutput[]>;

    getPendingOrderIds(
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getSpreadReductionsArray(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getSupportedTokens(overrides?: CallOverrides): Promise<string[]>;

    gov(overrides?: CallOverrides): Promise<string>;

    govFeesDai(overrides?: CallOverrides): Promise<BigNumber>;

    govFeesToken(overrides?: CallOverrides): Promise<BigNumber>;

    hasOpenLimitOrder(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTradingContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxPendingMarketOrders(overrides?: CallOverrides): Promise<BigNumber>;

    maxTradesPerPair(overrides?: CallOverrides): Promise<BigNumber>;

    nftLastSuccess(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftRewards(overrides?: CallOverrides): Promise<BigNumber>;

    nftSuccessTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    nfts(
      overrides?: CallOverrides
    ): Promise<[string, string, string, string, string]>;

    openInterestDai(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    openLimitOrderIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openLimitOrders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IGNSTradingStorageV5.OpenLimitOrderStructOutput>;

    openLimitOrdersCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openTrades(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IGNSTradingStorageV5.TradeStructOutput>;

    openTradesCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openTradesInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IGNSTradingStorageV5.TradeInfoStructOutput>;

    pairTraders(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    pairTradersArray(
      _pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    pairTradersId(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingMarketCloseCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingMarketOpenCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingOrderIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingOrderIdsCount(
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<string>;

    priceAggregator(overrides?: CallOverrides): Promise<string>;

    reqID_pendingMarketOrder(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IGNSTradingStorageV5.PendingMarketOrderStructOutput>;

    reqID_pendingNftOrder(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IGNSTradingStorageV5.PendingNftOrderStructOutput>;

    spreadReductionsP(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    supportedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    tokensBurned(overrides?: CallOverrides): Promise<BigNumber>;

    tokensMinted(overrides?: CallOverrides): Promise<BigNumber>;

    trading(overrides?: CallOverrides): Promise<string>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    callbacks(overrides?: CallOverrides): Promise<BigNumber>;

    dev(overrides?: CallOverrides): Promise<BigNumber>;

    devFeesDai(overrides?: CallOverrides): Promise<BigNumber>;

    devFeesToken(overrides?: CallOverrides): Promise<BigNumber>;

    firstEmptyOpenLimitIndex(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    firstEmptyTradeIndex(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenLimitOrder(
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenLimitOrders(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingOrderIds(
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpreadReductionsArray(overrides?: CallOverrides): Promise<BigNumber>;

    getSupportedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    govFeesDai(overrides?: CallOverrides): Promise<BigNumber>;

    govFeesToken(overrides?: CallOverrides): Promise<BigNumber>;

    hasOpenLimitOrder(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTradingContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPendingMarketOrders(overrides?: CallOverrides): Promise<BigNumber>;

    maxTradesPerPair(overrides?: CallOverrides): Promise<BigNumber>;

    nftLastSuccess(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftRewards(overrides?: CallOverrides): Promise<BigNumber>;

    nftSuccessTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    nfts(overrides?: CallOverrides): Promise<BigNumber>;

    openInterestDai(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openLimitOrderIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openLimitOrders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openLimitOrdersCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openTrades(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openTradesCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openTradesInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pairTraders(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pairTradersArray(
      _pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pairTradersId(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingMarketCloseCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingMarketOpenCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingOrderIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingOrderIdsCount(
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    priceAggregator(overrides?: CallOverrides): Promise<BigNumber>;

    reqID_pendingMarketOrder(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reqID_pendingNftOrder(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    spreadReductionsP(overrides?: CallOverrides): Promise<BigNumber>;

    supportedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokensBurned(overrides?: CallOverrides): Promise<BigNumber>;

    tokensMinted(overrides?: CallOverrides): Promise<BigNumber>;

    trading(overrides?: CallOverrides): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    callbacks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dev(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devFeesDai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devFeesToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    firstEmptyOpenLimitIndex(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    firstEmptyTradeIndex(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenLimitOrder(
      _trader: PromiseOrValue<string>,
      _pairIndex: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenLimitOrders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingOrderIds(
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpreadReductionsArray(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupportedTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    govFeesDai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    govFeesToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasOpenLimitOrder(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTradingContract(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPendingMarketOrders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTradesPerPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftLastSuccess(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftSuccessTimelock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nfts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openInterestDai(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openLimitOrderIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openLimitOrders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openLimitOrdersCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openTrades(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openTradesCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openTradesInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairTraders(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairTradersArray(
      _pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairTradersId(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingMarketCloseCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingMarketOpenCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingOrderIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingOrderIdsCount(
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceAggregator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reqID_pendingMarketOrder(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reqID_pendingNftOrder(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    spreadReductionsP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensBurned(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensMinted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trading(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
