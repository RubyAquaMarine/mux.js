/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IGNSTradingV6_2Interface extends utils.Interface {
  functions: {
    "cancelOpenLimitOrder(uint256,uint256)": FunctionFragment;
    "closeTradeMarket(uint256,uint256)": FunctionFragment;
    "closeTradeMarketTimeout(uint256)": FunctionFragment;
    "isDone()": FunctionFragment;
    "isPaused()": FunctionFragment;
    "limitOrdersTimelock()": FunctionFragment;
    "marketOrdersTimeout()": FunctionFragment;
    "maxPosDai()": FunctionFragment;
    "nftRewards()": FunctionFragment;
    "openTradeMarketTimeout(uint256)": FunctionFragment;
    "pairInfos()": FunctionFragment;
    "referrals()": FunctionFragment;
    "storageT()": FunctionFragment;
    "updateOpenLimitOrder(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "updateSl(uint256,uint256,uint256)": FunctionFragment;
    "updateTp(uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelOpenLimitOrder"
      | "closeTradeMarket"
      | "closeTradeMarketTimeout"
      | "isDone"
      | "isPaused"
      | "limitOrdersTimelock"
      | "marketOrdersTimeout"
      | "maxPosDai"
      | "nftRewards"
      | "openTradeMarketTimeout"
      | "pairInfos"
      | "referrals"
      | "storageT"
      | "updateOpenLimitOrder"
      | "updateSl"
      | "updateTp"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelOpenLimitOrder",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeTradeMarket",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeTradeMarketTimeout",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "isDone", values?: undefined): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "limitOrdersTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketOrdersTimeout",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxPosDai", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openTradeMarketTimeout",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "pairInfos", values?: undefined): string;
  encodeFunctionData(functionFragment: "referrals", values?: undefined): string;
  encodeFunctionData(functionFragment: "storageT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateOpenLimitOrder",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSl",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTp",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelOpenLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeTradeMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeTradeMarketTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isDone", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "limitOrdersTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketOrdersTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxPosDai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openTradeMarketTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pairInfos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "referrals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "storageT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOpenLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateSl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateTp", data: BytesLike): Result;

  events: {};
}

export interface IGNSTradingV6_2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGNSTradingV6_2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelOpenLimitOrder(
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeTradeMarket(
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeTradeMarketTimeout(
      _order: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isDone(overrides?: CallOverrides): Promise<[boolean]>;

    isPaused(overrides?: CallOverrides): Promise<[boolean]>;

    limitOrdersTimelock(overrides?: CallOverrides): Promise<[BigNumber]>;

    marketOrdersTimeout(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxPosDai(overrides?: CallOverrides): Promise<[BigNumber]>;

    nftRewards(overrides?: CallOverrides): Promise<[string]>;

    openTradeMarketTimeout(
      _order: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pairInfos(overrides?: CallOverrides): Promise<[string]>;

    referrals(overrides?: CallOverrides): Promise<[string]>;

    storageT(overrides?: CallOverrides): Promise<[string]>;

    updateOpenLimitOrder(
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      tp: PromiseOrValue<BigNumberish>,
      sl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSl(
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      newSl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTp(
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      newTp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  cancelOpenLimitOrder(
    pairIndex: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeTradeMarket(
    pairIndex: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeTradeMarketTimeout(
    _order: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isDone(overrides?: CallOverrides): Promise<boolean>;

  isPaused(overrides?: CallOverrides): Promise<boolean>;

  limitOrdersTimelock(overrides?: CallOverrides): Promise<BigNumber>;

  marketOrdersTimeout(overrides?: CallOverrides): Promise<BigNumber>;

  maxPosDai(overrides?: CallOverrides): Promise<BigNumber>;

  nftRewards(overrides?: CallOverrides): Promise<string>;

  openTradeMarketTimeout(
    _order: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pairInfos(overrides?: CallOverrides): Promise<string>;

  referrals(overrides?: CallOverrides): Promise<string>;

  storageT(overrides?: CallOverrides): Promise<string>;

  updateOpenLimitOrder(
    pairIndex: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    tp: PromiseOrValue<BigNumberish>,
    sl: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSl(
    pairIndex: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    newSl: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTp(
    pairIndex: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    newTp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelOpenLimitOrder(
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    closeTradeMarket(
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    closeTradeMarketTimeout(
      _order: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isDone(overrides?: CallOverrides): Promise<boolean>;

    isPaused(overrides?: CallOverrides): Promise<boolean>;

    limitOrdersTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    marketOrdersTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    maxPosDai(overrides?: CallOverrides): Promise<BigNumber>;

    nftRewards(overrides?: CallOverrides): Promise<string>;

    openTradeMarketTimeout(
      _order: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    pairInfos(overrides?: CallOverrides): Promise<string>;

    referrals(overrides?: CallOverrides): Promise<string>;

    storageT(overrides?: CallOverrides): Promise<string>;

    updateOpenLimitOrder(
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      tp: PromiseOrValue<BigNumberish>,
      sl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSl(
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      newSl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTp(
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      newTp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    cancelOpenLimitOrder(
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeTradeMarket(
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeTradeMarketTimeout(
      _order: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isDone(overrides?: CallOverrides): Promise<BigNumber>;

    isPaused(overrides?: CallOverrides): Promise<BigNumber>;

    limitOrdersTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    marketOrdersTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    maxPosDai(overrides?: CallOverrides): Promise<BigNumber>;

    nftRewards(overrides?: CallOverrides): Promise<BigNumber>;

    openTradeMarketTimeout(
      _order: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pairInfos(overrides?: CallOverrides): Promise<BigNumber>;

    referrals(overrides?: CallOverrides): Promise<BigNumber>;

    storageT(overrides?: CallOverrides): Promise<BigNumber>;

    updateOpenLimitOrder(
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      tp: PromiseOrValue<BigNumberish>,
      sl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSl(
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      newSl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTp(
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      newTp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelOpenLimitOrder(
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeTradeMarket(
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeTradeMarketTimeout(
      _order: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isDone(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    limitOrdersTimelock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketOrdersTimeout(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPosDai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openTradeMarketTimeout(
      _order: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pairInfos(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referrals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    storageT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateOpenLimitOrder(
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      tp: PromiseOrValue<BigNumberish>,
      sl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSl(
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      newSl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTp(
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      newTp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
