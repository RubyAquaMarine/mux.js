/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IGNSNftRewardsV6 {
  export type TriggeredLimitIdStruct = {
    trader: PromiseOrValue<string>;
    pairIndex: PromiseOrValue<BigNumberish>;
    index: PromiseOrValue<BigNumberish>;
    order: PromiseOrValue<BigNumberish>;
  };

  export type TriggeredLimitIdStructOutput = [
    string,
    BigNumber,
    BigNumber,
    number
  ] & { trader: string; pairIndex: BigNumber; index: BigNumber; order: number };

  export type TriggeredLimitStruct = {
    first: PromiseOrValue<string>;
    sameBlock: PromiseOrValue<string>[];
    block: PromiseOrValue<BigNumberish>;
  };

  export type TriggeredLimitStructOutput = [string, string[], BigNumber] & {
    first: string;
    sameBlock: string[];
    block: BigNumber;
  };
}

export interface IGNSNftRewardsV6Interface extends utils.Interface {
  functions: {
    "claimPoolTokens(uint256,uint256)": FunctionFragment;
    "claimTokens()": FunctionFragment;
    "currentOrder()": FunctionFragment;
    "currentRound()": FunctionFragment;
    "openLimitOrderTypes(address,uint256,uint256)": FunctionFragment;
    "roundOrdersToClaim(address,uint256)": FunctionFragment;
    "roundTokens(uint256)": FunctionFragment;
    "sameBlockTriggers((address,uint256,uint256,uint8))": FunctionFragment;
    "timedOut((address,uint256,uint256,uint8))": FunctionFragment;
    "tokensClaimed(address)": FunctionFragment;
    "tokensClaimedTotal()": FunctionFragment;
    "tokensToClaim(address)": FunctionFragment;
    "triggered((address,uint256,uint256,uint8))": FunctionFragment;
    "triggeredLimits(address,uint256,uint256,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimPoolTokens"
      | "claimTokens"
      | "currentOrder"
      | "currentRound"
      | "openLimitOrderTypes"
      | "roundOrdersToClaim"
      | "roundTokens"
      | "sameBlockTriggers"
      | "timedOut"
      | "tokensClaimed"
      | "tokensClaimedTotal"
      | "tokensToClaim"
      | "triggered"
      | "triggeredLimits"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimPoolTokens",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentOrder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openLimitOrderTypes",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "roundOrdersToClaim",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "roundTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sameBlockTriggers",
    values: [IGNSNftRewardsV6.TriggeredLimitIdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "timedOut",
    values: [IGNSNftRewardsV6.TriggeredLimitIdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensClaimed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensClaimedTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensToClaim",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "triggered",
    values: [IGNSNftRewardsV6.TriggeredLimitIdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "triggeredLimits",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimPoolTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openLimitOrderTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roundOrdersToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roundTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sameBlockTriggers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timedOut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensClaimedTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "triggered", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "triggeredLimits",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IGNSNftRewardsV6 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGNSNftRewardsV6Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimPoolTokens(
      _fromRound: PromiseOrValue<BigNumberish>,
      _toRound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentOrder(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentRound(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openLimitOrderTypes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    roundOrdersToClaim(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roundTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sameBlockTriggers(
      _id: IGNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    timedOut(
      _id: IGNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokensClaimed(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokensClaimedTotal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokensToClaim(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    triggered(
      _id: IGNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    triggeredLimits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  claimPoolTokens(
    _fromRound: PromiseOrValue<BigNumberish>,
    _toRound: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimTokens(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentOrder(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentRound(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openLimitOrderTypes(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  roundOrdersToClaim(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roundTokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sameBlockTriggers(
    _id: IGNSNftRewardsV6.TriggeredLimitIdStruct,
    overrides?: CallOverrides
  ): Promise<string[]>;

  timedOut(
    _id: IGNSNftRewardsV6.TriggeredLimitIdStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokensClaimed(
    arg0: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokensClaimedTotal(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokensToClaim(
    arg0: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  triggered(
    _id: IGNSNftRewardsV6.TriggeredLimitIdStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  triggeredLimits(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimPoolTokens(
      _fromRound: PromiseOrValue<BigNumberish>,
      _toRound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimTokens(overrides?: CallOverrides): Promise<void>;

    currentOrder(overrides?: CallOverrides): Promise<BigNumber>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    openLimitOrderTypes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    roundOrdersToClaim(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roundTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sameBlockTriggers(
      _id: IGNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: CallOverrides
    ): Promise<string[]>;

    timedOut(
      _id: IGNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokensClaimed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensClaimedTotal(overrides?: CallOverrides): Promise<BigNumber>;

    tokensToClaim(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    triggered(
      _id: IGNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    triggeredLimits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IGNSNftRewardsV6.TriggeredLimitStructOutput>;
  };

  filters: {};

  estimateGas: {
    claimPoolTokens(
      _fromRound: PromiseOrValue<BigNumberish>,
      _toRound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentOrder(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentRound(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openLimitOrderTypes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roundOrdersToClaim(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roundTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sameBlockTriggers(
      _id: IGNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timedOut(
      _id: IGNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensClaimed(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokensClaimedTotal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokensToClaim(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    triggered(
      _id: IGNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    triggeredLimits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimPoolTokens(
      _fromRound: PromiseOrValue<BigNumberish>,
      _toRound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentOrder(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentRound(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openLimitOrderTypes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roundOrdersToClaim(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roundTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sameBlockTriggers(
      _id: IGNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timedOut(
      _id: IGNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensClaimed(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokensClaimedTotal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokensToClaim(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    triggered(
      _id: IGNSNftRewardsV6.TriggeredLimitIdStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    triggeredLimits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
