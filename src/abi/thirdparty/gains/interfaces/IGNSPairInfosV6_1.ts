/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IGNSPairInfosV6_1 {
  export type PairParamsStruct = {
    onePercentDepthAbove: PromiseOrValue<BigNumberish>;
    onePercentDepthBelow: PromiseOrValue<BigNumberish>;
    rolloverFeePerBlockP: PromiseOrValue<BigNumberish>;
    fundingFeePerBlockP: PromiseOrValue<BigNumberish>;
  };

  export type PairParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    onePercentDepthAbove: BigNumber;
    onePercentDepthBelow: BigNumber;
    rolloverFeePerBlockP: BigNumber;
    fundingFeePerBlockP: BigNumber;
  };

  export type PairRolloverFeesStruct = {
    accPerCollateral: PromiseOrValue<BigNumberish>;
    lastUpdateBlock: PromiseOrValue<BigNumberish>;
  };

  export type PairRolloverFeesStructOutput = [BigNumber, BigNumber] & {
    accPerCollateral: BigNumber;
    lastUpdateBlock: BigNumber;
  };

  export type PairFundingFeesStruct = {
    accPerOiLong: PromiseOrValue<BigNumberish>;
    accPerOiShort: PromiseOrValue<BigNumberish>;
    lastUpdateBlock: PromiseOrValue<BigNumberish>;
  };

  export type PairFundingFeesStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    accPerOiLong: BigNumber;
    accPerOiShort: BigNumber;
    lastUpdateBlock: BigNumber;
  };
}

export interface IGNSPairInfosV6_1Interface extends utils.Interface {
  functions: {
    "getAccFundingFeesLong(uint256)": FunctionFragment;
    "getAccFundingFeesShort(uint256)": FunctionFragment;
    "getAccFundingFeesUpdateBlock(uint256)": FunctionFragment;
    "getAccRolloverFees(uint256)": FunctionFragment;
    "getAccRolloverFeesUpdateBlock(uint256)": FunctionFragment;
    "getFundingFeePerBlockP(uint256)": FunctionFragment;
    "getOnePercentDepthAbove(uint256)": FunctionFragment;
    "getOnePercentDepthBelow(uint256)": FunctionFragment;
    "getPairInfos(uint256[])": FunctionFragment;
    "getPendingAccFundingFees(uint256)": FunctionFragment;
    "getPendingAccRolloverFees(uint256)": FunctionFragment;
    "getRolloverFeePerBlockP(uint256)": FunctionFragment;
    "getTradeFundingFee(address,uint256,uint256,bool,uint256,uint256)": FunctionFragment;
    "getTradeFundingFeePure(int256,int256,uint256,uint256)": FunctionFragment;
    "getTradeInitialAccFundingFeesPerOi(address,uint256,uint256)": FunctionFragment;
    "getTradeInitialAccRolloverFeesPerCollateral(address,uint256,uint256)": FunctionFragment;
    "getTradeLiquidationPrice(address,uint256,uint256,uint256,bool,uint256,uint256)": FunctionFragment;
    "getTradeLiquidationPricePure(uint256,bool,uint256,uint256,uint256,int256)": FunctionFragment;
    "getTradeOpenedAfterUpdate(address,uint256,uint256)": FunctionFragment;
    "getTradePriceImpact(uint256,uint256,bool,uint256)": FunctionFragment;
    "getTradePriceImpactPure(uint256,bool,uint256,uint256,uint256)": FunctionFragment;
    "getTradeRolloverFee(address,uint256,uint256,uint256)": FunctionFragment;
    "getTradeRolloverFeePure(uint256,uint256,uint256)": FunctionFragment;
    "getTradeValuePure(uint256,int256,uint256,int256,uint256)": FunctionFragment;
    "maxNegativePnlOnOpenP()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAccFundingFeesLong"
      | "getAccFundingFeesShort"
      | "getAccFundingFeesUpdateBlock"
      | "getAccRolloverFees"
      | "getAccRolloverFeesUpdateBlock"
      | "getFundingFeePerBlockP"
      | "getOnePercentDepthAbove"
      | "getOnePercentDepthBelow"
      | "getPairInfos"
      | "getPendingAccFundingFees"
      | "getPendingAccRolloverFees"
      | "getRolloverFeePerBlockP"
      | "getTradeFundingFee"
      | "getTradeFundingFeePure"
      | "getTradeInitialAccFundingFeesPerOi"
      | "getTradeInitialAccRolloverFeesPerCollateral"
      | "getTradeLiquidationPrice"
      | "getTradeLiquidationPricePure"
      | "getTradeOpenedAfterUpdate"
      | "getTradePriceImpact"
      | "getTradePriceImpactPure"
      | "getTradeRolloverFee"
      | "getTradeRolloverFeePure"
      | "getTradeValuePure"
      | "maxNegativePnlOnOpenP"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAccFundingFeesLong",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccFundingFeesShort",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccFundingFeesUpdateBlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccRolloverFees",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccRolloverFeesUpdateBlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingFeePerBlockP",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOnePercentDepthAbove",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOnePercentDepthBelow",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairInfos",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingAccFundingFees",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingAccRolloverFees",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRolloverFeePerBlockP",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeFundingFee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeFundingFeePure",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeInitialAccFundingFeesPerOi",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeInitialAccRolloverFeesPerCollateral",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeLiquidationPrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeLiquidationPricePure",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeOpenedAfterUpdate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradePriceImpact",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradePriceImpactPure",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeRolloverFee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeRolloverFeePure",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeValuePure",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxNegativePnlOnOpenP",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccFundingFeesLong",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccFundingFeesShort",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccFundingFeesUpdateBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccRolloverFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccRolloverFeesUpdateBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingFeePerBlockP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOnePercentDepthAbove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOnePercentDepthBelow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingAccFundingFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingAccRolloverFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRolloverFeePerBlockP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeFundingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeFundingFeePure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeInitialAccFundingFeesPerOi",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeInitialAccRolloverFeesPerCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeLiquidationPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeLiquidationPricePure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeOpenedAfterUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradePriceImpact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradePriceImpactPure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeRolloverFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeRolloverFeePure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeValuePure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxNegativePnlOnOpenP",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IGNSPairInfosV6_1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGNSPairInfosV6_1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAccFundingFeesLong(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAccFundingFeesShort(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAccFundingFeesUpdateBlock(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAccRolloverFees(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAccRolloverFeesUpdateBlock(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFundingFeePerBlockP(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOnePercentDepthAbove(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOnePercentDepthBelow(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPairInfos(
      indices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [
        IGNSPairInfosV6_1.PairParamsStructOutput[],
        IGNSPairInfosV6_1.PairRolloverFeesStructOutput[],
        IGNSPairInfosV6_1.PairFundingFeesStructOutput[]
      ]
    >;

    getPendingAccFundingFees(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { valueLong: BigNumber; valueShort: BigNumber }
    >;

    getPendingAccRolloverFees(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRolloverFeePerBlockP(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTradeFundingFee(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      collateral: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTradeFundingFeePure(
      accFundingFeesPerOi: PromiseOrValue<BigNumberish>,
      endAccFundingFeesPerOi: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTradeInitialAccFundingFeesPerOi(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTradeInitialAccRolloverFeesPerCollateral(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTradeLiquidationPrice(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      openPrice: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      collateral: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTradeLiquidationPricePure(
      openPrice: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      collateral: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      rolloverFee: PromiseOrValue<BigNumberish>,
      fundingFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTradeOpenedAfterUpdate(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getTradePriceImpact(
      openPrice: PromiseOrValue<BigNumberish>,
      pairIndex: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      tradeOpenInterest: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        priceImpactP: BigNumber;
        priceAfterImpact: BigNumber;
      }
    >;

    getTradePriceImpactPure(
      openPrice: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      startOpenInterest: PromiseOrValue<BigNumberish>,
      tradeOpenInterest: PromiseOrValue<BigNumberish>,
      onePercentDepth: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        priceImpactP: BigNumber;
        priceAfterImpact: BigNumber;
      }
    >;

    getTradeRolloverFee(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTradeRolloverFeePure(
      accRolloverFeesPerCollateral: PromiseOrValue<BigNumberish>,
      endAccRolloverFeesPerCollateral: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTradeValuePure(
      collateral: PromiseOrValue<BigNumberish>,
      percentProfit: PromiseOrValue<BigNumberish>,
      rolloverFee: PromiseOrValue<BigNumberish>,
      fundingFee: PromiseOrValue<BigNumberish>,
      closingFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxNegativePnlOnOpenP(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  getAccFundingFeesLong(
    pairIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccFundingFeesShort(
    pairIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccFundingFeesUpdateBlock(
    pairIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccRolloverFees(
    pairIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccRolloverFeesUpdateBlock(
    pairIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFundingFeePerBlockP(
    pairIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOnePercentDepthAbove(
    pairIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOnePercentDepthBelow(
    pairIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPairInfos(
    indices: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<
    [
      IGNSPairInfosV6_1.PairParamsStructOutput[],
      IGNSPairInfosV6_1.PairRolloverFeesStructOutput[],
      IGNSPairInfosV6_1.PairFundingFeesStructOutput[]
    ]
  >;

  getPendingAccFundingFees(
    pairIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { valueLong: BigNumber; valueShort: BigNumber }
  >;

  getPendingAccRolloverFees(
    pairIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRolloverFeePerBlockP(
    pairIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTradeFundingFee(
    trader: PromiseOrValue<string>,
    pairIndex: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    long: PromiseOrValue<boolean>,
    collateral: PromiseOrValue<BigNumberish>,
    leverage: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTradeFundingFeePure(
    accFundingFeesPerOi: PromiseOrValue<BigNumberish>,
    endAccFundingFeesPerOi: PromiseOrValue<BigNumberish>,
    collateral: PromiseOrValue<BigNumberish>,
    leverage: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTradeInitialAccFundingFeesPerOi(
    trader: PromiseOrValue<string>,
    pairIndex: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTradeInitialAccRolloverFeesPerCollateral(
    trader: PromiseOrValue<string>,
    pairIndex: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTradeLiquidationPrice(
    trader: PromiseOrValue<string>,
    pairIndex: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    openPrice: PromiseOrValue<BigNumberish>,
    long: PromiseOrValue<boolean>,
    collateral: PromiseOrValue<BigNumberish>,
    leverage: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTradeLiquidationPricePure(
    openPrice: PromiseOrValue<BigNumberish>,
    long: PromiseOrValue<boolean>,
    collateral: PromiseOrValue<BigNumberish>,
    leverage: PromiseOrValue<BigNumberish>,
    rolloverFee: PromiseOrValue<BigNumberish>,
    fundingFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTradeOpenedAfterUpdate(
    trader: PromiseOrValue<string>,
    pairIndex: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getTradePriceImpact(
    openPrice: PromiseOrValue<BigNumberish>,
    pairIndex: PromiseOrValue<BigNumberish>,
    long: PromiseOrValue<boolean>,
    tradeOpenInterest: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      priceImpactP: BigNumber;
      priceAfterImpact: BigNumber;
    }
  >;

  getTradePriceImpactPure(
    openPrice: PromiseOrValue<BigNumberish>,
    long: PromiseOrValue<boolean>,
    startOpenInterest: PromiseOrValue<BigNumberish>,
    tradeOpenInterest: PromiseOrValue<BigNumberish>,
    onePercentDepth: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      priceImpactP: BigNumber;
      priceAfterImpact: BigNumber;
    }
  >;

  getTradeRolloverFee(
    trader: PromiseOrValue<string>,
    pairIndex: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    collateral: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTradeRolloverFeePure(
    accRolloverFeesPerCollateral: PromiseOrValue<BigNumberish>,
    endAccRolloverFeesPerCollateral: PromiseOrValue<BigNumberish>,
    collateral: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTradeValuePure(
    collateral: PromiseOrValue<BigNumberish>,
    percentProfit: PromiseOrValue<BigNumberish>,
    rolloverFee: PromiseOrValue<BigNumberish>,
    fundingFee: PromiseOrValue<BigNumberish>,
    closingFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxNegativePnlOnOpenP(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    getAccFundingFeesLong(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccFundingFeesShort(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccFundingFeesUpdateBlock(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccRolloverFees(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccRolloverFeesUpdateBlock(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundingFeePerBlockP(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOnePercentDepthAbove(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOnePercentDepthBelow(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairInfos(
      indices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [
        IGNSPairInfosV6_1.PairParamsStructOutput[],
        IGNSPairInfosV6_1.PairRolloverFeesStructOutput[],
        IGNSPairInfosV6_1.PairFundingFeesStructOutput[]
      ]
    >;

    getPendingAccFundingFees(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { valueLong: BigNumber; valueShort: BigNumber }
    >;

    getPendingAccRolloverFees(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRolloverFeePerBlockP(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeFundingFee(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      collateral: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeFundingFeePure(
      accFundingFeesPerOi: PromiseOrValue<BigNumberish>,
      endAccFundingFeesPerOi: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeInitialAccFundingFeesPerOi(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeInitialAccRolloverFeesPerCollateral(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeLiquidationPrice(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      openPrice: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      collateral: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeLiquidationPricePure(
      openPrice: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      collateral: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      rolloverFee: PromiseOrValue<BigNumberish>,
      fundingFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeOpenedAfterUpdate(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getTradePriceImpact(
      openPrice: PromiseOrValue<BigNumberish>,
      pairIndex: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      tradeOpenInterest: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        priceImpactP: BigNumber;
        priceAfterImpact: BigNumber;
      }
    >;

    getTradePriceImpactPure(
      openPrice: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      startOpenInterest: PromiseOrValue<BigNumberish>,
      tradeOpenInterest: PromiseOrValue<BigNumberish>,
      onePercentDepth: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        priceImpactP: BigNumber;
        priceAfterImpact: BigNumber;
      }
    >;

    getTradeRolloverFee(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeRolloverFeePure(
      accRolloverFeesPerCollateral: PromiseOrValue<BigNumberish>,
      endAccRolloverFeesPerCollateral: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeValuePure(
      collateral: PromiseOrValue<BigNumberish>,
      percentProfit: PromiseOrValue<BigNumberish>,
      rolloverFee: PromiseOrValue<BigNumberish>,
      fundingFee: PromiseOrValue<BigNumberish>,
      closingFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxNegativePnlOnOpenP(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getAccFundingFeesLong(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccFundingFeesShort(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccFundingFeesUpdateBlock(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccRolloverFees(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccRolloverFeesUpdateBlock(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundingFeePerBlockP(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOnePercentDepthAbove(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOnePercentDepthBelow(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairInfos(
      indices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingAccFundingFees(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingAccRolloverFees(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRolloverFeePerBlockP(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeFundingFee(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      collateral: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeFundingFeePure(
      accFundingFeesPerOi: PromiseOrValue<BigNumberish>,
      endAccFundingFeesPerOi: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeInitialAccFundingFeesPerOi(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeInitialAccRolloverFeesPerCollateral(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeLiquidationPrice(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      openPrice: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      collateral: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeLiquidationPricePure(
      openPrice: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      collateral: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      rolloverFee: PromiseOrValue<BigNumberish>,
      fundingFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeOpenedAfterUpdate(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradePriceImpact(
      openPrice: PromiseOrValue<BigNumberish>,
      pairIndex: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      tradeOpenInterest: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradePriceImpactPure(
      openPrice: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      startOpenInterest: PromiseOrValue<BigNumberish>,
      tradeOpenInterest: PromiseOrValue<BigNumberish>,
      onePercentDepth: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeRolloverFee(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeRolloverFeePure(
      accRolloverFeesPerCollateral: PromiseOrValue<BigNumberish>,
      endAccRolloverFeesPerCollateral: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeValuePure(
      collateral: PromiseOrValue<BigNumberish>,
      percentProfit: PromiseOrValue<BigNumberish>,
      rolloverFee: PromiseOrValue<BigNumberish>,
      fundingFee: PromiseOrValue<BigNumberish>,
      closingFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxNegativePnlOnOpenP(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccFundingFeesLong(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccFundingFeesShort(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccFundingFeesUpdateBlock(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccRolloverFees(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccRolloverFeesUpdateBlock(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFundingFeePerBlockP(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOnePercentDepthAbove(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOnePercentDepthBelow(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairInfos(
      indices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingAccFundingFees(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingAccRolloverFees(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRolloverFeePerBlockP(
      pairIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradeFundingFee(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      collateral: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradeFundingFeePure(
      accFundingFeesPerOi: PromiseOrValue<BigNumberish>,
      endAccFundingFeesPerOi: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradeInitialAccFundingFeesPerOi(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradeInitialAccRolloverFeesPerCollateral(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradeLiquidationPrice(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      openPrice: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      collateral: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradeLiquidationPricePure(
      openPrice: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      collateral: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      rolloverFee: PromiseOrValue<BigNumberish>,
      fundingFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradeOpenedAfterUpdate(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradePriceImpact(
      openPrice: PromiseOrValue<BigNumberish>,
      pairIndex: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      tradeOpenInterest: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradePriceImpactPure(
      openPrice: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      startOpenInterest: PromiseOrValue<BigNumberish>,
      tradeOpenInterest: PromiseOrValue<BigNumberish>,
      onePercentDepth: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradeRolloverFee(
      trader: PromiseOrValue<string>,
      pairIndex: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradeRolloverFeePure(
      accRolloverFeesPerCollateral: PromiseOrValue<BigNumberish>,
      endAccRolloverFeesPerCollateral: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradeValuePure(
      collateral: PromiseOrValue<BigNumberish>,
      percentProfit: PromiseOrValue<BigNumberish>,
      rolloverFee: PromiseOrValue<BigNumberish>,
      fundingFee: PromiseOrValue<BigNumberish>,
      closingFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxNegativePnlOnOpenP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
